{"version":3,"sources":["secondaries.js","wifiPop.js","DataManager.js","header.js","flowGuage.js","graph.js","volGuage.js","tareButton.js","logPopup.js","logButton.js","uIController.js","stopButton.js","keypadInput.js","keyInput.js","calibrationPop.js","offsetButton.js","logNotifier.js","pidPopup.js","pidButton.js","graphBuffer.js","secondaryDataManager.js","InfluxGraph.js","pidSelector.js","offsetPopVol.js","secondaryPop.js","offsetButtonvol.js","secondaryPanel.js","envManager.js","purgeButton.js","primeButton.js","volumetricPanel.js","secondaryMenu.js","App.js","index.js"],"names":["NoSelectType","units","name","int_name","channels","volumetric","SecondarySelections","VolumetricSelections","exports","WifiPop","handleClick","props","toggle","state","statusText","ssidList","selectSsid","selectPassword","hasInternet","showKeyboard","layoutName","showPassState","getConnections","a","fetch","then","res","json","result","aps","accessPoints","i","length","ssid","push","value","setState","getSsids","ssidSelected","event","target","passChanged","keyboard","setInput","ConnectWifi","requestOptions","method","headers","body","JSON","stringify","password","success","error","ConnectAnyway","pwInputSelected","pwInputDeselected","onChange","input","showPassword","pwState","onKeyPress","button","handleShift","componentDidMount","renderConnect","className","onClick","style","display","verticalAlign","fontSize","fontWeight","size","id","type","onSelect","onBlur","checked","color","keyboardRef","r","renderAlready","width","renderContent","this","React","Component","DataManager","loopState","flowOs","running","serialNum","volOs","volSecDerived","flowData","instFlow","avgFlow","volume","setPoint","secData","reading","unit","extraData","available","volData","pollCallbacks","runningCallbacks","getPythonData","bind","setInterval","_cb","old","_new","loopRunning","instantFlow","_avg","Math","abs","secVal","secUnit","secSetPoint","secondaryExtra","secAvailable","volSecReading","setpoint","volSetPoint","volUnits","volumeAvailable","console","log","assertRunning","sendPollEvent","primaryInstance","secondaryInstance","Header","seen","wifiColor","getSerialNumber","snum","getInstance","getStateData","startSerialScan","rotatePressed","showWifiModal","checkInternet","icon","faWifi","left","top","position","justifyContent","window","innerHeight","faSyncAlt","flipped","FlowGuage","flowRate","GetInstantFlowRate","roundedFlow","floor","getFlowData","VolumeGuage","GetVolume","peakAvg","TareButton","unfocus","zeroing","ZeroSensor","setTimeout","rainbowScan","rbIndex","LogPopup","bUsbStat","SusbStat","statColor","fSaveStat","fName","saveColor","intervalId","getFile","fn","fileName","forceUpdate","refreshFile","scanButtonColors","startScan","intervalIds","stopScan","clearInterval","saveFile","refreshUsbStat","usbStatus","height","background","backgroundColor","LogButton","loggingMsg","sColor","getFileName","togglePop","newSeen","startLogging","logState","stopLogging","UIController","stopCallbacks","cb","ss","_instance","checkVolStat","status","_int","buttonText","assertState","OnRunningChange","StartStop","numpadLayout","default","KeyPadInput","undefined","initVal","kpStrValue","String","keyPadRef","borderColor","overrideval","setVal","val","onChanged","_in","fullKeyboard","f_in","parseFloat","isNaN","inputChange","onEnter","destroy","strChange","slice","kbBlur","margin","border","layout","OffsetInput","OnCurrentChange","currentVal","OnWantedChange","wantedVal","osType","getVolSetPoint","SetOffset","os","offset","offsetValue","closeFunc","ClearOffset","iFlowRate","menuStates","empty_calval","flowCal","volCal","new_calval","unitConversions","finiteCheck","num","def","isFinite","CalibrationPop","populateTable","calibrationList","calibrationTableItems","key","getCalibrations","selected","selectedType","cachedSelect","calSelected","inputVolCal","fcsVol","extVol","toFixed","updateStagedValues","evVal","parse","selFlowCal","selVolCal","saveAvailable","nameChanged","stagedName","saveButtonTxt","resetValues","setSaveColor","setApplyColor","applyColor","flow","vol","newStagedFlow","inputFlowCal","newStagedVol","stagedFlow","stagedVolume","fcsFlowUpdate","flowUpdated","fcsFlow","newFlowCal","extFlow","extFlowUpdate","fcsVolUpdate","volUpdated","newVolCal","extVolUpdate","saveStaged","reqBody","applyCal","renderInputs","flex","marginLeft","marginTop","flexDirection","renderButtons","applyButtonTxt","newVal","saveStr","renderNameInput","visibility","renderSelectedValues","marginRight","dataManager","readData","getAllData","_Flow","_Volume","intVol","menuState","applyAvailable","currentVolume","currentFlow","OffsetButton","marginleft","LogNotifier","logStatus","update","prevProps","PidPopup","OnKpChange","kProp","OnKiChange","kInt","OnKdChange","kDer","OnVLChange","volLim","SaveValues","onSet","gProp","gInt","gDer","CloseWindow","kp","ki","kd","PidButton","vl","OnButtonPressed","SetParams","_kp","_ki","_kd","_vl","GraphBuffer","data_len","d_time","data","Array","fill","secondary","time","datarr","initData","timeBuf","Date","valueOf","timeStamp","extraDataLen","volread","aflow","sunit","sval","spoint","exd","volReading","shift","ratio","startPoint","SecondaryDataManager","sensorParams","sensorType","channel","limit","volParams","volAvailable","response","parsedResponse","_type","_units","_channel","_limit","avail","catch","err","lim","sendBackendUpdate","sendVolBackendUpdate","myInstance","require","rmbuttons","InfluxGraph","SetTimeFrame","frame","graphTimeRatio","getPointsopt","performance","now","gdata","addPoint","points","getPoints","aflow_arr","sval_arr","sp_arr","ts_arr","os_arr","vscale_arr","mode","x","y","line","yaxis","showlegend","title","yaxis2","overlaying","side","getParams","t","l","graphRunning","stopGraphDelayed","ssButtonAssert","start","addStopStartCallback","OnPoll","timeStr","config","displayModeBar","modeBarButtonsToRemove","responsive","bottom","right","PidSelector","SetControlState","controlState","OnStateChange","bColor","OnSetPointChange","flowset","SetSetpoint","SetVolume","volDisp","volset","volumeOnSecondary","GetSetPoint","setpt","last","GetVolPoint","OnVolSetPointChange","set","OpenSettings","settingsOpen","GetUnit","getVolumetricData","vol_secondary","vunit","Button","Group","faCog","OffsetPop","getOffset","SecondaryPop","buttonBlue","confirmColor","buttonGreen","selectedLimitStr","populateLists","__sel","typeList","populateUnits","unitList","populateChannels","channelList","typeSelected","selectedUnit","selectedChannel","volSelected","unitSelected","channelSelected","getTypeIdx","indexOf","f_limit","setParams","setVolParams","onParamUpdate","limSelect","limBlurred","limChanged","limStr","selectedTypeIdx","selectedLimit","toHex","c","hex","toString","gethtmlfromrgb","g","b","round","greenredGradient","red","green","buf","genGreenToReds","getGreenToRedColorFromPct","pct","_ipct","status_ready","float","status_nready","SecondaryPanel","openSetup","loadDefault","params","measurementType","measurementUnit","measurementLimit","measurementChannel","onParamsChanged","updateReading","currentReading","getReading","getSecLimit","rd","guageColor","sensorAvailable","statusUI","onLimchange","measLimInput","applyLimChange","setLimit","measLimBuf","shallRender","alignSelf","keypad","EnvManager","envVars","rotate","didLoad","PrimeButton","sendBackend","setHeld","setReleased","ssFunc","_color","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","VolumetricPanel","getVolParams","_voldata","setVolLimit","SecondaryMenu","selectFlow","tabState","flowColor","volColor","selectVolume","textAlign","updatePidState","App","assertRotate","shouldRotate","rotateScreen","viewReady","loadEnvs","envMan","loadVariables","envsLoaded","updateLogState","pidState","screenRotation","addEventListener","e","preventDefault","history","createBrowserHistory","ReactDOM","render","StrictMode","path","exact","from","to","document","getElementById"],"mappings":"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","file":"static/js/main.ac47ff2e.chunk.js","sourcesContent":["var SciPresMonitor = {\n    units: [\n        \"psi\",\n        \"mmHg\",\n        \"kPa\",\n        \"bar\"\n    ],\n\n    name: \"SciPres Monitor I\",\n    int_name: \"scipres_1\",\n    channels: [1, 2, 3, 4],\n    volumetric: false\n};\n\nvar PendotechPresMonitor = {\n    units: [\n        \"psi\",\n        \"mmHg\",\n        \"kPa\",\n        \"bar\"\n    ],\n\n    name: \"Pendotech PressureMAT\",\n    int_name: \"pendo_1\",\n    channels: [1, 2, 3],\n    volumetric: false\n}\n\nvar ScaleMonitor = {\n    units: [\n        \"auto\",\n    ],\n    name : \"AnD Scale\",\n    int_name: \"scale_1\",\n    channels: [1],\n    volumetric: true\n};\nvar PendoTechPressure = {\n    units: [\n        \"psi\",\n        \"mmHg\",\n        \"kPa\",\n        \"bar\"\n    ],\n\n    name: \"PendoTech Pressure Sensor\",\n    int_name: \"pend_pres_1\",\n    channels: [1,2,3],\n    volumetric: false\n};\n\n\nvar NoSelectType = {\n    units: [\"N/A\"],\n    name: \"No Sensor\",\n    int_name:\"none\",\n    channels: [0],\n    volumetric: false\n};\n\n\n\nvar SecondarySelections = [NoSelectType, SciPresMonitor,PendotechPresMonitor];\nvar VolumetricSelections = [NoSelectType,ScaleMonitor]\nexports.SecondarySelections = SecondarySelections;\nexports.VolumetricSelections = VolumetricSelections;","import React from 'react';\nimport Keyboard from 'react-simple-keyboard';\nimport 'react-simple-keyboard/build/css/index.css';\nimport './wifiPop.css'\nexport default class WifiPop extends React.Component\n{\n\n    handleClick = () =>{\n        this.props.toggle();\n    };\n    state = {\n        statusText:'Fetching Nearby WiFi Connections...',\n        ssidList:[],\n        selectSsid:\"Select Wifi Connection\",\n        selectPassword:\"\",\n        hasInternet:false,\n        showKeyboard:false,\n        layoutName: \"default\",\n        showPassState: \"password\"\n    }\n\n    getConnections = () =>\n    {\n        var _ssids = []\n        const getSsids = async() =>{\n        await fetch(\"http://localhost:3011/getWifiAps\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                var aps = result.accessPoints\n                //console.log(aps.length);\n\n                for(var i = 0; i < aps.length; i++){\n                    var ssid = aps[i].ssid;\n                    \n\n                    this.state.ssidList.push(<option value={ssid}>{ssid}</option>)\n                }\n                this.setState({statusText:\"Waiting For Selection\"})\n               \n            }\n        )\n        }\n\n        getSsids();\n\n    }\n    ssidSelected = (event) =>{\n        //console.log(\"setting selected ssid \",event.target.value)\n        this.setState({selectSsid:event.target.value})\n    }\n    passChanged = (event) =>{\n        //console.log(\"GOT PASSWORD: \",event.target.value)\n        this.setState({selectPassword:event.target.value});\n        this.keyboard.setInput(this.state.selectPassword);\n    }\n\n    ConnectWifi = () =>{\n        this.setState({statusText:\"Attempting To Connect to \" + this.state.selectSsid});\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({\n                ssid:this.state.selectSsid,\n                password:this.state.selectPassword\n            })\n        }\n\n        fetch('http://localhost:3011/connectAp',requestOptions)\n        .then(res => res.json())\n        .then(\n            (result)=>{\n                //console.log(result)\n                if(result.success){\n                    this.setState({statusText:\"Connected To \" + this.state.selectSsid + \"!\"})\n                }else{\n                    this.setState({statusText:\"Could Not Connect To \" + this.state.selectSsid})\n                }\n            },\n            (error) =>{\n                //console.log(error)\n            }\n        )\n    }\n    ConnectAnyway =() =>{\n        this.setState({hasInternet:false})\n       \n    }\n\n    pwInputSelected = () =>{\n        //console.log(\"Selected PW Input\")\n        this.setState({showKeyboard:true})\n    }\n    pwInputDeselected = () =>{\n        //console.log(\"Deselect pw input\")\n        \n    }\n    onChange = (input) => {\n        //console.log(\"setting pw\",input);\n        this.setState({selectPassword:input})\n    }\n    showPassword = () =>{\n      \n        const pwState = this.state.showPassState\n        //console.log(pwState)\n        this.setState({showPassState: pwState === \"text\" ? \"password\" : \"text\"})\n    }\n    onKeyPress = (button) => {\n        if (button === \"{shift}\" || button === \"{lock}\") this.handleShift();\n        else this.setState({layoutName:\"default\"});\n    }\n    handleShift = () =>{\n        const layoutName = this.state.layoutName;\n\n        this.setState({\n            layoutName: layoutName === \"default\" ? \"shift\" : \"default\"\n        })\n    }\n    componentDidMount = () =>{\n      //console.log(\"WIFI POP SHOWN\")\n      \n      this.state.ssidList.push(<option value={\"Select Wifi Connection\"}>Select WiFi Connection</option>)\n      this.setState({hasInternet:this.props.hasInternet})\n      this.getConnections()\n    }\n\n    renderConnect = () => {\n        return(\n            <div className=\"modalz\">\n            <div className=\"modal_content\">\n                <div className=\"modalTopBar\">\n                    <div className=\"modalTitlez\"><div className=\"titletext\">Connect To A WiFi Access Point</div></div>\n                <div className=\"exitButtonz\" onClick={this.handleClick}><div style={{display:\"table-cell\",verticalAlign:\"middle\",fontSize:\"30px\",fontWeight:\"bold\"}}>&times;</div></div>\n                </div>\n                <div className=\"statusInd\">{this.state.statusText}</div>\n                <form className=\"wifiForm\">\n                <label className=\"formLabel\">WiFi Access Point Name:</label>\n                <select className=\"ssidDropdown\" size=\"5\" id=\"selectbox\" value={this.state.selectSsid} onChange={this.ssidSelected}>            \n                {this.state.ssidList}\n                </select>\n                <label className=\"formLabel\">Password:</label>\n                <input className=\"passwordInput\" type={this.state.showPassState} name=\"password\" value={this.state.selectPassword} onChange={this.passChanged} onSelect={this.pwInputSelected} onBlur={this.pwInputDeselected}></input>\n                <label className=\"formLabel\">Show Password:</label>\n                <input className=\"showPass\" type=\"radio\" checked={this.state.showPassState ===\"text\"} onClick={this.showPassword}></input>\n                </form>\n                <button className=\"connectButton\" onClick ={this.ConnectWifi}>Connect</button>\n             \n            </div>\n            <div style={{color:'black'}}>\n            {this.state.showKeyboard ? <Keyboard \n                        keyboardRef={r => (this.keyboard = r)}\n                        layoutName={this.state.layoutName}\n                        onChange={this.onChange}\n                        onKeyPress={this.onKeyPress}/> : null}\n            </div>\n        </div>\n        );\n    }\n    renderAlready = () =>{\n        return(\n            <div className=\"modalz\" >\n            <div className=\"modal_content\">\n                <div className=\"modalTopBar\">\n                    <div className=\"modalTitlez\"><div className=\"titletext\">Connect To A WiFi Access Point</div></div>\n                <div className=\"exitButtonz\" onClick={this.handleClick}><div style={{display:\"table-cell\",verticalAlign:\"middle\",fontSize:\"30px\",fontWeight:\"bold\"}}>&times;</div></div>\n                </div>\n                <div className=\"statusInd\">Already Connected!</div>\n                <button className=\"connectButton\" style = {{width:'40%'}} onClick ={this.ConnectAnyway}>New Connection</button>\n            </div>\n            \n        </div>\n        );\n    }\n\n    renderContent = () =>{\n        if(this.state.hasInternet){\n            return this.renderAlready();\n        }else{\n            return this.renderConnect();\n        }\n    }\n    render(){\n        return(\n         <>\n          {this.renderContent()}\n          </>\n        );\n    }\n}","export default class DataManager{\n\n    static primaryInstance = null;\n    static secondaryInstance = null;\n\n    static getInstance(){\n        if(DataManager.primaryInstance == null)\n        {\n            DataManager.primaryInstance = new DataManager();\n            \n        }\n\n        return DataManager.primaryInstance;\n    }\n    getStateData()\n    {\n        return this.loopState;\n    }\n    getFlowData()\n    {\n        return this.flowData;\n    }\n\n    getVolumetricData()\n    {\n        return this.volData;\n    }\n\n    getSecondaryData()\n    {\n        return this.secData;\n    }\n    getAllData()\n    {\n        let concat = {\n            loopState: this.loopState,\n            flowData : this.flowData,\n            volData :this.volData,\n            secData : this.secData\n        };\n        return concat;\n    }\n\n    OnPoll(_cb){\n        this.pollCallbacks.push(_cb);\n    }\n\n    OnRunningChange(_cb){\n        this.runningCallbacks.push(_cb);\n    }\n\n    assertRunning(old,_new){\n        if(old != _new)\n        {\n            for(var i = 0; i < this.runningCallbacks.length; i++)\n            {\n                this.runningCallbacks[i](_new);\n            }\n        }\n    }\n    getPythonData(){\n        fetch(\"http://localhost:3005/getState\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n            \n            //console.log(result);\n         \n            this.loopState.flowOs = result.state.flowOs;\n            this.loopState.running = result.state.loopRunning;\n            this.loopState.serialNum = result.state.serialNum;\n            this.loopState.volOs = result.state.volOs;\n            this.loopState.volSecDerived = result.state.volSecDerived;\n            \n            \n            this.flowData.instFlow = result.instantFlow;\n            this.flowData.setPoint = result.setPoint;\n            var _avg = result.avgFlow;\n            if(Math.abs(_avg - result.setPoint) < result.setPoint * 0.06)\n            {\n                _avg = result.setPoint;\n            }\n            this.flowData.avgFlow = _avg;\n            this.flowData.volume = result.volume;\n            \n            this.secData.reading = result.secVal;\n            this.secData.unit = result.secUnit;\n            this.secData.setPoint = result.secSetPoint;\n            this.secData.extraData = result.secondaryExtra;\n            this.secData.available = result.secAvailable;\n\n            this.volData.reading = result.volSecReading;\n            this.volData.setpoint = result.volSetPoint;\n            this.volData.unit = result.volUnits;\n            this.volData.available = result.volumeAvailable;\n            },\n            (error) => {console.log(error)}\n        )\n        this.assertRunning(this.running,this.loopState.running);\n        this.running = this.loopState.running;\n        this.sendPollEvent();\n    }\n\n    sendPollEvent(){\n        for(var i=0;i<this.pollCallbacks.length;i++){\n            this.pollCallbacks[i]();\n        }\n    }\n    constructor()\n    {\n        this.loopState = {\n            flowOs:0,\n            running:false,\n            serialNum:\"N/A\",\n            volOs:\"1\",\n            volSecDerived:false\n        };\n    \n        this.flowData = {\n            instFlow:0,\n            avgFlow:0,\n            volume:0,\n            setPoint:0\n        }\n    \n        this.secData = {\n            reading:0,\n            unit:\"null\",\n            setPoint:0,\n            extraData:[],\n            available: false\n        }\n    \n        this.volData = {\n            reading:0,\n            unit:\"null\",\n            setPoint:0,\n            available: false\n        }\n\n        this.pollCallbacks = [];\n        this.runningCallbacks = [];\n        this.running = false;\n        //console.log(\"constructing\",this);\n        this.getPythonData = this.getPythonData.bind(this);\n        setInterval(this.getPythonData,100);\n    }\n\n}","import React from 'react';\nimport './components.css'\nimport { faSyncAlt, faWifi } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport WifiPop from './wifiPop';\nimport DataManager from './DataManager';\nexport default class Header extends React.Component\n{\n    state = {\n        serialNum:'N/A',\n        seen:false,\n        hasInternet:false,\n        wifiColor:'red'\n    }\n\n    getSerialNumber = () =>{\n       \n        var snum = DataManager.getInstance().getStateData().serialNum;\n        this.setState({serialNum:snum});\n                \n          \n    }\n\n    startSerialScan = () =>{\n        setInterval(this.getSerialNumber,2500);\n    }\n    rotatePressed = () =>{\n        //console.log(\"Rotate Pressed\")\n        this.props.rotatePressed()\n    }\n\n    showWifiModal = () =>{\n        \n        this.setState({seen:!this.state.seen})\n        //console.log(\"Wifi Pressed\",this.state.seen)\n    }\n    checkInternet = () =>{\n      \n        fetch('http://localhost:3011/checkConn')\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                var color = 'red';\n                //console.log(result)\n                if(result.hasInternet) color = 'limegreen';\n                //console.log(color)\n                this.setState({hasInternet:result.hasInternet,wifiColor:color})\n            },\n            (error)=> {\n               \n            }\n        )\n        \n    }\n    componentDidMount = () =>{\n        //console.log(this.state.seen)\n        this.checkInternet()\n        setInterval(this.checkInternet,5000);\n        this.startSerialScan();\n    }\n    render()\n    {\n        return(<h1 className=\"mainHeader\">\n             <button className=\"wifiButton\" onClick={this.showWifiModal}><FontAwesomeIcon icon = {faWifi} style={{'padding':5}}  color={this.state.wifiColor}></FontAwesomeIcon></button>\n            <div style={{left:'43%',top:'-0.5%',position:'absolute',fontSize:17,justifyContent:'center'}}><span style={{fontSize:window.innerHeight * 0.05}}>FCS</span> [S/N:{this.state.serialNum}]</div>\n            <button className=\"rotateButton\" onClick={this.rotatePressed}><FontAwesomeIcon icon = {faSyncAlt} style={{'padding':5}}  color=\"white\"></FontAwesomeIcon></button>\n            {this.state.seen ? <WifiPop flipped={this.props.flipped} hasInternet={this.state.hasInternet} toggle={this.showWifiModal} /> : null}\n            </h1>);\n    }\n}","import React from 'react';\nimport './components.css'\nimport DataManager from './DataManager';\n\nexport default class FlowGuage extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = \n        {\n            flowRate:0,\n            volume:0\n        }\n        this.GetInstantFlowRate = this.GetInstantFlowRate.bind(this);\n        setInterval(this.GetInstantFlowRate,50);\n\n    }\n\n    GetInstantFlowRate()\n    {\n \n        const roundedFlow = Math.floor(DataManager.getInstance().getFlowData().avgFlow);\n        this.setState({flowRate:roundedFlow});\n                   \n            \n            \n            \n        \n    }\n\n\n    render()\n    {\n        return(\n            <div className=\"guage\">\n            <div className= \"guageTitle\">Instantaneous Flow Rate</div>\n            <div className = \"flowBox\">\n                <div className=\"innerFlowBox\">\n                    <div className=\"divider\"></div>\n                    <div className=\"divider\" style={{top:\"-35%\"}}>{this.state.flowRate}</div>\n                </div>\n                <div className=\"innerFlowBoxL\">\n                    <div className=\"divider\"></div>\n                    <div className=\"divider\" style={{top:\"-35%\"}}>mL/min</div>\n                </div>\n                {/* Flow = {this.state.flowRate} */}\n            </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './components.css';\nimport { InfluxDB } from \"@influxdata/influxdb-client\";\nexport default class GraphContainer extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = \n        {\n            //10.10.0.121\n            //10.0.0.37\n            graphEmbedUrl : \"http://localhost:3000/d-solo/cgKoJuHGz/flotekguirev1?orgId=1&refresh=500ms&from=now-10m&to=now&panelId=4\",\n            timeState : \"10m\",\n        }\n        //this.graphEmbedUrl = \"http://localhost:3000/d-solo/cgKoJuHGz/flotekguirev1?orgId=1&refresh=100ms&from=now-10m&to=now&panelId=4\";\n        this.SetTimeFrame = this.SetTimeFrame.bind(this);\n    }\n    SetTimeFrame(_timeFrame)\n    {\n        //this.timeFrame = _timeFrame;\n        var _url = \"http://localhost:3000/d-solo/cgKoJuHGz/flotekguirev1?orgId=1&refresh=500ms&from=now-\" + _timeFrame +\"&to=now&panelId=4\"\n       // //console.log(_url);\n       //this.graphEmbedUrl = _url;\n        //this.setState({graphEmbedUrl : _url})\n        this.setState({graphEmbedUrl : _url});\n        this.setState({timeState:_timeFrame})\n    }\n    render()\n    {\n        return(\n            <div className=\"graphContainer\">\n                <div className=\"graph\">\n                    <iframe src={this.state.graphEmbedUrl} className=\"grafanaEmbed\"></iframe>\n                </div>\n                <div className = \"tfContainer\">\n                    {this.state.timeState === \"10m\"&&\n                        <div>\n                        <button className=\"timeFrameButton\" onClick={() => {this.SetTimeFrame(\"1m\")}}>1 Minute</button>\n                        <button className=\"timeFrameButton\" onClick={() => {this.SetTimeFrame(\"5m\")}}>5 Minutes</button>\n                        <button className=\"timeFrameButtonF\" onClick={() => {this.SetTimeFrame(\"10m\")}}>10 Minutes</button>\n                        </div>\n                    }\n\n                    {this.state.timeState === \"5m\"&&\n                        <div>\n                        <button className=\"timeFrameButton\" onClick={() => {this.SetTimeFrame(\"1m\")}}>1 Minute</button>\n                        <button className=\"timeFrameButtonF\" onClick={() => {this.SetTimeFrame(\"5m\")}}>5 Minutes</button>\n                        <button className=\"timeFrameButton\" onClick={() => {this.SetTimeFrame(\"10m\")}}>10 Minutes</button>\n                        </div>\n                    }\n\n                    {this.state.timeState === \"1m\"&&\n                        <div>\n                        <button className=\"timeFrameButtonF\" onClick={() => {this.SetTimeFrame(\"1m\")}}>1 Minute</button>\n                        <button className=\"timeFrameButton\" onClick={() => {this.SetTimeFrame(\"5m\")}}>5 Minutes</button>\n                        <button className=\"timeFrameButton\" onClick={() => {this.SetTimeFrame(\"10m\")}}>10 Minutes</button>\n                        </div>\n                    }\n\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './components.css'\n\nexport default class VolumeGuage extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = \n        {\n            flowRate:0,\n            volume:0\n        }\n        this.GetVolume = this.GetVolume.bind(this);\n        setInterval(this.GetVolume,300);\n\n    }\n\n    GetVolume()\n    {\n        fetch(\"http://localhost:3005/peakAvg\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                const peakAvg = Math.floor(result.volume);\n                this.setState({volume:peakAvg});\n                ////console.log(peakAvg);\n               \n            },\n\n            (error)=> {\n                \n                this.setState({flowRate:0});\n            }\n        )\n    }\n\n    render()\n    {\n        return(\n            <div className=\"volguage\">\n            <div className= \"guageTitle\">Volume</div>\n            <div className = \"flowBox\">\n                <div className=\"innervFlowBox\" >\n                    <div className=\"divider\"></div>\n                    <div className=\"divider\" style={{top:\"-35%\"}}>{this.state.volume}</div>\n                </div>\n                <div className=\"innervFlowBoxL\">\n                    <div className=\"divider\"></div>\n                    <div className=\"divider\" style={{top:\"-35%\"}}>mL</div>\n                </div>\n                {/* Flow = {this.state.flowRate} */}\n            </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport './components.css'\nimport { wait } from '@testing-library/react';\n\n\nexport default class TareButton extends React.Component\n{\n    \n    constructor(props)\n    {\n       \n        super(props);\n        this.state = {\n            zeroing:false,\n        }\n        this.ZeroSensor.bind(this);\n    }\n\n \n\n    ZeroSensor()\n    {\n        this.setState({zeroing:true})\n        fetch(\"http://localhost:3005/zero\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n        setTimeout(this.unfocus, 3000);\n        \n        \n    }\n    unfocus = () =>{\n        this.setState({zeroing:false})\n        //console.log(\"dz\")\n    }\n    render()\n    {\n        return(\n            <div>\n            {this.state.zeroing === false &&\n                <button className=\"tareButton\" onClick={() => {this.ZeroSensor()}}>Tare</button>\n            }\n            {this.state.zeroing === true &&\n                <button className=\"tareButtonfocus\" onClick={() => {this.ZeroSensor()}}>Tare</button>  \n            }\n          </div>\n           \n        );\n    }\n}","import React from 'react';\nimport './components.css'\nimport './loggingModule.css'\n\nconst rainbowScan = ['#297EE3','#6729E3','#E329C7','#F44353','#FC9B4F','#0EBAD5'];\nvar rbIndex = 0;\n\nconst sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\nexport default class LogPopup extends React.Component\n{\n \n    state = {\n        bUsbStat : false,\n        SusbStat : 'No USB Drive Found',\n        statColor : \"red\",\n        fSaveStat : \"Save\",\n        fName : this.props.fName,\n        saveColor: '#0EBAD5',\n        intervalId: 0\n    }\n    handleClick = () =>{\n        this.props.toggle();\n    };\n    getFile = () =>{\n        fetch(\"http://localhost:3005/filename\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                const fn = result.fileName;\n                this.setState({fName:fn})\n                this.forceUpdate()\n            },\n\n            (error)=> {\n             \n            }\n        )\n    };\n    refreshFile = () =>{\n        this.props.getFile();\n    }\n\n    scanButtonColors = () =>{\n        //console.log('Setting Button Color at index ' + rbIndex)\n        this.setState({saveColor:rainbowScan[rbIndex]});\n        rbIndex += 1;\n        if(rbIndex >= rainbowScan.length) rbIndex = 0;\n    }\n\n    startScan = () =>{\n        var intervalIds = setInterval(this.scanButtonColors,500);\n        this.setState({intervalId:intervalIds})\n        //console.log(\"Pressasded\")\n    }\n\n    stopScan = () =>{\n        clearInterval(this.state.intervalId);\n        this.setState({saveColor:'#0EBAD5'})\n    }\n    saveFile = () =>{\n        //console.log(\"Pressed\")\n\n        \n        \n        //this.setState({saveColor:'#0EBAD5'})\n        if(this.state.bUsbStat){\n\n            this.setState({fSaveStat:'Saving'});\n            this.startScan();\n            fetch(\"http://localhost:3005/savecsv\")\n            .then(res => res.json())\n            .then(\n                (result) =>{\n                    this.setState({fSaveStat:\"Saved\"})\n                    this.stopScan();\n                },\n\n                (error)=> {\n                    \n                }\n            )\n        }\n\n        \n        \n    };\n    refreshUsbStat = () =>{\n        //console.log('Saving')\n        fetch(\"http://localhost:3005/usbstat\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                const usbstat = result.usbStatus;\n                \n                if(usbstat == 1)\n                {\n                    this.setState({bUsbStat:true,SusbStat:'USB Drive Connected',statColor:\"LightGreen\"})\n                }\n                else\n                {\n                    this.setState({bUsbStat:false,SusbStat:'No USB Drive Found',statColor:\"LightCoral\"})\n                }\n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n\n        this.getFile();\n    };\n    render()\n    {\n        return(\n            <div className=\"modal\" style={{height:\"40%\",width:\"40%\",top:\"30%\",left:\"30%\"}}>\n                <div className=\"modal_contentl\">\n                <div className=\"modalTopBarl\">\n                        <div className=\"modalTitlel\"><div className=\"titletext\">Log Flow Data</div></div>\n                        <div className=\"exitButtonl\" onClick={this.handleClick}><div style={{display:\"table-cell\",verticalAlign:\"middle\",fontSize:\"30px\",fontWeight:\"bold\"}}>&times;</div></div>\n                    </div>\n                    <div className=\"statBar\">\n                        <div className = \"usbStatBar\" style={{background:this.state.statColor}}><div className=\"ttable\"><p className=\"statTxt\">{this.state.SusbStat}</p></div></div>\n                        <button className = \"refButton\" onClick={this.refreshUsbStat}>Refresh</button>\n                    </div>\n                    <div className= \"fileBar\">\n                        <div className = \"filenamebar\" ><div className=\"ttable\"><p className=\"statTxt\" style={{fontSize:\"11px\"}}>{this.state.fName}</p></div></div>\n                        <button className = \"refButton\" style={{backgroundColor:this.state.saveColor}}onClick={this.saveFile} >{this.state.fSaveStat}</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './components.css'\nimport LogPopUp from './logPopup'\n\nexport default class LogButton extends React.Component\n{\n    state = {\n        seen:0,\n        loggingMsg:'Start Logging',\n        fName : \"\",\n        sColor: '#ed2f2f',\n    };\n\n    getFileName = () =>{\n        //console.log(\"Getting fname\")\n        fetch(\"http://localhost:3005/filename\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                const fn = result.fileName;\n                this.setState({fName:fn})\n                this.forceUpdate()\n            },\n\n            (error)=> {\n             \n            }\n        )\n    }\n    togglePop = () =>{\n        var newSeen = 0\n        newSeen = this.state.seen;\n        //console.log(newSeen);\n        this.getFileName();\n        switch(newSeen){\n            \n            case 0:\n                this.setState({loggingMsg:'Stop Logging'});\n                this.setState({sColor:'#5fe86d'})\n                this.startLogging();\n                this.props.logState(true);\n                break;\n            case 1:\n                this.setState({loggingMsg:'Save Log'})\n                this.setState({sColor:'#5bace3'})\n                this.stopLogging();\n                this.getFileName();\n                this.props.logState(false);\n                break;\n            case 2:\n                \n                this.setState({loggingMsg:'Start Logging'})\n                this.setState({sColor:'#ed2f2f'})\n                \n                \n            \n        }\n        \n        this.forceUpdate();\n        newSeen = this.state.seen > 2 ? 0 : this.state.seen + 1;\n        this.setState({seen: newSeen});\n    };\n\n    startLogging = () =>{\n        fetch(\"http://localhost:3005/startlog\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n    };\n\n    stopLogging = () =>{\n        fetch(\"http://localhost:3005/stoplog\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n               \n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n    };\n\n    render()\n    {\n        return(\n            <div>\n                <button className=\"logButton\" style={{backgroundColor:this.state.sColor}} onClick={this.togglePop}>{this.state.loggingMsg}</button>\n                {this.state.seen > 2 ? <LogPopUp toggle={this.togglePop} fName = {this.state.fName} /> : null}\n            </div>\n        );\n    }\n}","export default class UIController {\n\n    static _instance = null;\n    stopCallbacks = [];\n    static getInstance()\n    {\n        if(UIController._instance == null){\n            UIController._instance = new UIController();\n        }\n        return this._instance;\n    }\n\n    addStopStartCallback(cb)\n    {\n        this.stopCallbacks.push(cb);\n    }\n    onStopStartPushed(ss)\n    {\n        for(var i = 0; i < this.stopCallbacks.length; i++)\n        {\n            this.stopCallbacks[i](ss);\n        }\n    }\n    \n\n}\n","import React from 'react';\nimport './components.css'\nimport DataManager from './DataManager';\nimport UIController from './uIController';\n\nexport default class TareButton extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.StartStop.bind(this);\n        this.state = {\n            status: false,\n            buttonText: 'Start',\n            color: '#60E570'\n        };\n        this._int = -9999;\n    }\n\n    checkVolStat = () =>{\n        fetch(\"http://localhost:3005/getVolrs\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                const stat = result.status;\n\n                if(stat === 1){\n                   // console.log(\"start\")\n                    //UIController.getInstance().onStopStartPushed(false);\n                    clearInterval(this._int);\n                    this.setState({buttonText:'Start',status:false,color:'#60E570'});\n                }\n                else{\n                   // console.log(\"stop\")\n                    //UIController.getInstance().onStopStartPushed(true);\n                    this.setState({buttonText:'Stop',status:true,color:'#F85151'});\n                    \n                }\n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n    }\n    StartStop()\n    {\n        if(this.state.status)\n        {\n            fetch(\"http://localhost:3005/stop\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n            //Stop\n            //UIController.getInstance().onStopStartPushed(false);\n            //clearInterval(this._int);\n            //this.setState({buttonText:'Start',status:false,color:'#60E570'});\n        }\n        else\n        {\n            fetch(\"http://localhost:3005/start\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n            //Start\n            \n            //this.setState({buttonText:'Stop',status:true,color:'#F85151'});\n          \n            \n        }\n    }\n\n    assertState = (state) =>{\n        if(state)\n        {\n            this.setState({buttonText:'Stop',status:true,color:'#F85151'});\n        }else{\n            this.setState({buttonText:'Start',status:false,color:'#60E570'});\n        }\n    }\n    componentDidMount = ()=>{\n        DataManager.getInstance().OnRunningChange(this.assertState);\n    }\n    render()\n    {\n        return(\n          <button className=\"stopButton\" style={{backgroundColor:this.state.color}} onClick={() => {this.StartStop()}}>{this.state.buttonText}</button>\n           \n        );\n    }\n}","import React from 'react'\nimport Keyboard from 'react-simple-keyboard';\nimport 'react-simple-keyboard/build/css/index.css';\nimport './kpInput.css'\nconst numpadLayout = {\n    default:[\n            '{enter} {bksp}',\n                '1 2 3',\n                '4 5 6',\n                '7 8 9',\n                '- 0 .'\n    ]\n}\n\n\nexport default class KeyPadInput extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        var str = \"\";\n\n        this.state = {\n            kpStrValue:\"\",\n            seen:false,\n            borderColor:'grey'\n        }\n        \n    }\n    componentDidMount = () =>{\n       // console.log(\"did mount\")\n        if(this.props.initVal != undefined){\n            //console.log(\"GOT INIT VAL\",this.props.initVal)\n            this.setState({kpStrValue:String(this.props.initVal)});\n        }\n\n        if(this.props.keyPadRef)\n        {\n            this.props.keyPadRef(this);\n        }\n    }\n    onSelect = () =>{\n        //console.log(\"KP SEEN\")\n\n        this.setState({seen:true,borderColor:'limegreen'});\n        if(this.props.overrideval !== undefined){\n            this.setState({kpStrValue:String(this.props.overrideval)})\n        }\n    }\n\n    onBlur = () =>{\n        \n    }\n    setVal = (val) =>{\n        this.setState({kpStrValue:val});\n    }\n    onChanged = (input) =>{\n        //console.log(\"changed\")\n        var _in = \"0\";\n        if(input !== \"\") _in = input\n        this.setState({kpStrValue:_in});\n\n        if(this.props.fullKeyboard){\n            this.props.onChange(_in);\n            return;\n        }\n        var f_in = 0;\n        try{\n            f_in = parseFloat(_in);\n        }catch{\n            return;\n        }\n\n        if(isNaN(f_in)){\n            f_in = 0;\n        }\n        this.props.onChange(f_in);\n    }\n\n    inputChange = (event) =>{\n        // var f_in = 0\n        //console.log(\"on in change \",event.target.value)\n     \n    }\n\n    onKeyPress = (button) =>{\n     //   console.log(\"button pressed\",button)\n        if(button === '{enter}'){\n            //console.log('enter pressed')\n            if(this.props.onEnter){\n                this.props.onEnter();\n            }\n            this.keyboard.destroy();\n            this.setState({seen:false,borderColor:'grey'})\n        }\n\n        if(button === '{bksp}'){\n            const strChange = this.state.kpStrValue.slice(0,-1);\n            this.onChanged(strChange);\n        }\n    }\n    kbBlur = () =>{\n       // console.log('kbblur')\n        this.setState({seen:false,borderColor:'grey'})\n    }\n\n   \n    render()\n    {\n        return(\n            <>\n            <input className={this.props.className} style={{margin:'3px',border:'3px solid',borderColor:this.state.borderColor}}name=\"kpinput\" value={(this.props.overrideval && !this.state.seen) ? this.props.overrideval : this.state.kpStrValue} onChange={this.inputChange} onSelect={this.onSelect} onBlur={this.onBlur}></input>\n            {this.state.seen ?\n                        <div className=\"kpFloatDiv\">\n                        <Keyboard\n                        keyboardRef={r => (this.keyboard = r)}\n                        layout = {this.props.fullKeyboard ? null : numpadLayout}\n                        layoutName = \"default\"\n                        onChange={this.onChanged}\n                        onKeyPress={this.onKeyPress} \n                        onBlur={this.kbBlur}/> \n                        </div> : null}\n            </>\n        )\n    }\n}","import React from 'react';\n\nimport './offsetPop.css'\nimport KeyPadInput from './keypadInput';\nclass OffsetInput extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            currentVal:0,\n            wantedVal: 0,\n            offset: 0,\n        };\n\n      \n    }\n\n    OnCurrentChange = (value) =>{\n        this.setState({currentVal:value})\n        ////console.log(this.state.currentVal)\n    };\n\n    OnWantedChange = (value) =>{\n        this.setState({wantedVal:value})\n       // //console.log(this.state.wantedVal)\n    };\n\n    componentDidMount = () =>{\n        if(this.props.osType === '0'){\n        this.GetInstantFlowRate();\n        }else{\n            this.getVolSetPoint();\n        }\n     \n    }\n\n    SetOffset = () =>{\n        \n        var os = this.state.wantedVal - this.state.currentVal;\n        if(this.props.osType === '1'){\n            if(this.state.currentVal === 0){\n                return;\n            }\n            else{\n            os = this.state.currentVal / this.state.wantedVal;\n            }\n        }\n        this.setState({offset:os})\n        //console.log(this.state.offset)\n\n        const requestOptions = {\n            method: 'POST',\n    \n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({offsetValue: os,type: this.props.osType})\n        }\n        //(requestOptions.body)\n        fetch(\"http://localhost:3005/offset\",requestOptions)\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n        \n        this.props.closeFunc()\n    };\n    ClearOffset = () =>{\n        \n        const requestOptions = {\n            method: 'POST',\n    \n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({offsetValue: 0,type: this.props.osType})\n        }\n        //(requestOptions.body)\n        fetch(\"http://localhost:3005/offset\",requestOptions)\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n        \n        this.props.closeFunc()\n    };\n    GetInstantFlowRate = () =>\n    {\n        \n        fetch(\"http://localhost:3005/flow\")\n            .then(res => res.json())\n            .then(\n                (result) =>{\n                    \n                    const roundedFlow = Math.floor(result.iFlowRate);\n                    //console.log(roundedFlow)\n                    this.setState({currentVal:roundedFlow});\n                   \n                },\n\n                (error)=> {\n                    \n                    this.setState({flowRate:0});\n                }\n            )\n            \n            \n        \n    }\n    getVolSetPoint = () =>\n    {\n        \n        fetch(\"http://localhost:3005/getVolSp\")\n            .then(res => res.json())\n            .then(\n                (result) =>{\n                    ////console.log(result.iflowRate)\n                    \n                    this.setState({currentVal:result.volume});\n                   \n                },\n\n                (error)=> {\n                    \n                    this.setState({flowRate:0});\n                }\n            )\n            \n            \n        \n    }\n\n    render(){\n       return(\n           <div style={{height:\"80%\",width:\"100%\"}}>\n                        <div className=\"keyOrg\">\n                            <div className=\"kTableCell\"> \n                                <div className=\"entitle\"><div className=\"entxt\" style={{color:\"blue\"}}>FDC Read Value:</div></div>\n                                <div className = \"entry\">\n                               \n                                <KeyPadInput overrideval={this.state.currentVal} className=\"entryIn\"onChange={this.OnCurrentChange}/>\n                                </div>\n                               \n                            </div>\n                            <div className=\"kTableCell\">\n                                <div className=\"entitle\"><div className=\"entxt\" style={{color:\"red\"}}>Ext. Measured Value:</div></div>\n                                <div className = \"entry\">\n                               \n                                <KeyPadInput initVal={this.state.wantedVal} className=\"entryIn\" onChange={this.OnWantedChange}/>\n                                </div>\n                            </div>\n                            \n                        </div>\n           <div className=\"buttonDivv\">\n            <button className=\"saveButtonv\" onClick ={this.SetOffset}>Calibrate</button>\n            <button className=\"saveButtonv\" style={{left:\"70%\",position:\"absolute\"}} onClick ={this.ClearOffset}>Reset</button>\n           </div>\n           </div>\n       );\n    }\n}\n\nexport default OffsetInput;","import React from 'react';\n\nimport './offsetPop.css'\nimport './calibrationPop.css'\nimport OffsetInput from './keyInput'\nimport KeyPadInput from './keypadInput';\nimport DataManager from './DataManager';\nimport { AccordionAccordion } from 'semantic-ui-react';\nconst menuStates = {\n    topMenu: 0,\n    new: 1,\n    update: 2,\n    load: 3,\n    delete: 4\n};\n\nconst NEW_VAL_FLAG = \"$$$ADDNEW\"\nconst empty_calval = \n{\n    name:\"default\",\n    flowCal:0,\n    volCal:1\n}\n\nconst new_calval = \n{\n    name:\"Add New\",\n    flowCal:0,\n    volCal:1\n}\nconst availColor = '#54d3ff';\nconst navailColor = '#c7f1ff';\nconst donecolor = 'limegreen';\nconst unitConversions = {\n    'g': 1,\n    'kg': 1 / (1000),\n    'oz': 28.35,\n    'lb': 28.35 * 16\n};\n\nfunction finiteCheck(num,def)\n{\n    return isFinite(num) ? num : def;\n}\nexport default class CalibrationPop extends React.Component\n{\n\n    handleClick = () =>{\n        this.props.toggle();\n    };\n    \n    constructor(props)\n    {\n        super(props);\n\n        this.calibrationList = [];\n        this.dataManager = DataManager.getInstance();\n        const readData = this.dataManager.getAllData();\n\n        const _Flow = readData.flowData.avgFlow;\n        const _Volume = readData.loopState.volSecDerived ? readData.volData.reading * unitConversions[readData.volData.unit] : 0;\n        const intVol = readData.flowData.volume;\n        this.state = {\n            flowOs:0,\n            menuState: menuStates.topMenu,\n            calibrationList:[],\n            calibrationTableItems:[],\n            selectedType: empty_calval,\n            saveButtonTxt: 'Save Cal.',\n            applyButtonTxt: 'Apply Cal',\n            saveAvailable:false,\n            applyAvailable:false,\n            stagedVolume: 1,\n            stagedFlow: 0,\n            stagedName: '',\n            currentVolume: 0,\n            currentFlow: 0,\n            selFlowCal:0,\n            selVolCal:1,\n            inputVolCal:1,\n            inputFlowCal:0,\n            extFlow: 0,\n            extVol: _Volume.toFixed(0),\n            fcsFlow: _Flow.toFixed(0),\n            fcsVol: intVol.toFixed(0),\n            flowUpdated: false,\n            volUpdated: true,\n            cachedSelect: null,\n            saveColor: navailColor,\n            applyColor: availColor\n\n\n        }\n        \n    }\n \n    populateTable = () =>{\n        \n        \n        for(var i = 0; i < this.calibrationList.length;i++)\n        {\n            console.log(this.calibrationList[i].volCal);\n            this.state.calibrationTableItems.push(<option key={i} value={JSON.stringify(this.calibrationList[i])}>{this.calibrationList[i].name}</option>)\n        }\n        this.state.calibrationTableItems.push(<option key={99} value={JSON.stringify(new_calval)}>+ Add New Calibration</option>)\n        console.log(this.state.calibrationTableItems)\n        this.forceUpdate();\n    }\n\n    \n    getCalibrations = () =>{\n        fetch(\"http://localhost:3005/getCalibrations\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                console.log('calresult',result);\n                this.calibrationList = result;\n                for(var i = 0; i < result.length;i++)\n                {\n                    if(result[i].selected)\n                    {\n                        this.selectedType = result[i];\n                        break;\n                    }\n                }\n                console.log(\"SELECTED\",this.selectedType);\n                \n                this.populateTable()\n                if(this.state.cachedSelect){\n                    this.calSelected({target:{value:this.state.cachedSelect}})\n                }else{\n                    this.calSelected({target:{value:JSON.stringify(this.selectedType)}})\n                }\n                //console.log(os);\n               \n            },\n\n            (error)=> {\n                \n         \n            }\n        )\n\n    }\n\n\n    componentDidMount = () =>{\n        this.getCalibrations();\n        this.setState({inputVolCal: finiteCheck((this.state.fcsVol/this.state.extVol).toFixed(3),1) })\n        this.updateStagedValues();\n    }\n\n    calSelected = (event) =>{\n        console.log(\"Selected\",event.target.value);\n        const evVal = JSON.parse(event.target.value);\n        this.setState({selectedType:evVal,selFlowCal:evVal.flowCal,selVolCal:evVal.volCal});\n        console.log(evVal.name)\n        if((evVal.name !== empty_calval.name) && (evVal.name !== new_calval.name))\n        {\n            console.log(\"Changing name\")\n            this.setState({saveAvailable:true});\n            this.nameChanged(evVal.name);\n        }else{\n            this.setState({saveAvailable:false});\n            this.setState({stagedName:'',saveButtonTxt:'Save Cal'})\n        }\n\n        this.resetValues(evVal.flowCal,evVal.volCal);\n    }\n\n    setSaveColor = (color) => {\n        this.setState({saveColor:color});\n    }\n    setApplyColor = (color) => {\n        this.setState({applyColor: color});\n    }\n    resetValues = (flow,vol) => {\n        const newStagedFlow = flow + this.state.inputFlowCal;\n        var newStagedVol = (vol * this.state.inputVolCal).toFixed(3);\n        newStagedVol = finiteCheck(newStagedVol,1);\n        this.setState({stagedFlow:newStagedFlow,stagedVolume:newStagedVol});\n     \n    }\n    updateStagedValues = () =>{\n        const newStagedFlow = this.state.selFlowCal + this.state.inputFlowCal;\n        var newStagedVol = (this.state.selVolCal * this.state.inputVolCal).toFixed(3);\n        newStagedVol = finiteCheck(newStagedVol,1);\n        this.setState({stagedFlow:newStagedFlow,stagedVolume:newStagedVol});\n        this.setSaveColor(availColor);\n    }\n    fcsFlowUpdate = (val) =>{\n        this.setState({flowUpdated:true,fcsFlow:val});\n        const newFlowCal = this.state.extFlow - val;\n        this.setState({inputFlowCal:newFlowCal});\n        this.setSaveColor(availColor);\n    }\n    extFlowUpdate = (val) =>{\n        this.setState({flowUpdated:true,extFlow:val});\n        const newFlowCal = val - this.state.fcsFlow;\n        this.setState({inputFlowCal:newFlowCal});\n        this.setSaveColor(availColor);\n    }\n    fcsVolUpdate = (val) =>{\n        this.setState({volUpdated:true,fcsVol:val});\n        var newVolCal = val / this.state.extVol;\n        newVolCal = finiteCheck(newVolCal,1);\n        this.setState({inputVolCal:newVolCal.toFixed(3)});\n        this.setSaveColor(availColor)\n    }\n    extVolUpdate = (val) =>{\n        this.setState({volUpdated:true,extVol:val});\n        var newVolCal = this.state.fcsVol / val;\n        newVolCal = finiteCheck(newVolCal,1);\n        this.setState({inputVolCal:newVolCal.toFixed(3)});\n        this.setSaveColor(availColor);\n    }\n\n    saveStaged = () =>{\n\n        const reqBody = JSON.stringify({\n            name:this.state.stagedName,\n            volCal:this.state.stagedVolume,\n            flowCal:this.state.stagedFlow\n        })\n        const requestOptions = {\n            method: 'POST',\n    \n            headers: {'Content-Type':'application/json'},\n            body: reqBody\n        }\n        //(requestOptions.body)\n        fetch(\"http://localhost:3005/addCalibration\",requestOptions)\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                this.setSaveColor(donecolor);\n                this.setApplyColor(availColor);\n                console.log(result);\n                this.state.calibrationTableItems = [];\n                this.state.cachedSelect = reqBody;\n                this.getCalibrations();\n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n    }\n\n    applyCal = () => {\n        console.log(\"applying\",this.state.selectedType);\n\n        const reqBody = JSON.stringify(this.state.selectedType)\n        const requestOptions = {\n            method: 'POST',\n    \n            headers: {'Content-Type':'application/json'},\n            body: reqBody\n        }\n        //(requestOptions.body)\n        fetch(\"http://localhost:3005/applyCalibration\",requestOptions)\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                this.setApplyColor(donecolor);\n            },\n\n            (error)=> {\n             \n            }\n        )\n    }\n    renderInputs = () =>{\n        return(<div style={{height:'60%',flex:2,marginLeft:'15%',marginTop:'1%'}}>\n                <div style={{display:'flex',flexDirection:'row'}}>\n                <div style={{flex:1,display:'flex',flexDirection:'column',height:'20%'}}>\n                <span>Flow Current (FCS Measured) Value:</span>\n                <KeyPadInput initVal={this.state.fcsFlow} onChange={this.fcsFlowUpdate} onEnter={this.updateStagedValues}/>\n                <span>Flow Wanted (Ext. Measured) Value:</span>\n                <KeyPadInput initVal={this.state.extFlow} onChange={this.extFlowUpdate} onEnter={this.updateStagedValues}/>\n                </div>\n                <div style={{flex:1,display:'flex',flexDirection:'column'}}>\n                <span>Volume Current (FCS Measured) Value:</span>\n                <KeyPadInput initVal={this.state.fcsVol} onChange={this.fcsVolUpdate} onEnter={this.updateStagedValues}/>\n                <span>Volume Wanted (Ext. Measured) Value:</span>\n                <KeyPadInput initVal={this.state.extVol} onChange={this.extVolUpdate} onEnter={this.updateStagedValues}/>\n                </div>\n                </div>\n            </div>)\n\n    }\n    renderButtons = () =>{\n        return(\n            <div style={{display:'flex',marginTop:'1%'}}>\n                <div className='butCont'>\n                <button className=\"calButton\" onClick={this.saveStaged} style={{backgroundColor:this.state.saveAvailable ? this.state.saveColor : navailColor}}>{this.state.saveButtonTxt}</button>\n                </div>\n                <div className='butCont'>\n                <button className=\"calButton\" onClick={this.applyCal} style={{backgroundColor:this.state.applyColor}}>{this.state.applyButtonTxt}</button>\n                </div>\n            </div>\n        )\n    }\n    nameChanged = (newVal) => {\n        console.log(\"Name Changed\",newVal);\n        const saveStr = `Save Cal (Staged -> ${newVal})`\n        this.setState({stagedName:newVal,saveButtonTxt:saveStr,saveAvailable:true})\n    }\n    renderNameInput = () =>{\n        return(\n        <div style={{visibility: this.state.selectedType.name === new_calval.name ? \"visible\" : \"hidden\",marginTop:\"1%\"}}>\n            <span style={{marginLeft:'15%'}}>Name: </span>\n            <KeyPadInput fullKeyboard={true} onChange={this.nameChanged}/>\n        </div>\n        )\n    }\n    renderSelectedValues = () =>{\n        return(\n            <div style={{display:'flex',flexDirection:'row'}}>\n                <div style={{display:'flex',flexDirection:'column',marginRight:'27%',marginLeft:'15%'}}>\n                <span>Selected Flow Cal: {this.state.selFlowCal}</span>\n                <span>Input Flow Cal. (EXT-FCS): {this.state.inputFlowCal}</span>\n                <span>Staged Flow Cal: {this.state.stagedFlow}</span>\n                </div>\n                <div style={{display:'flex',flexDirection:'column'}}>\n                <span>Selected Volume Cal: {this.state.selVolCal}</span>\n                <span>Input Vol Cal. (FCS/EXT): {this.state.inputVolCal}</span>\n                <span>Staged Volume Cal: {this.state.stagedVolume}</span>\n                </div>\n            </div>\n        )\n    }\n    renderContent = () =>{\n        return(\n            <div style={{display:'flex',flexDirection:'column'}}>\n            <div className='seldiv'>\n            <div className='listTitle'>Saved Calibrations</div>\n            <select className=\"selectDrop\" size=\"8\" id=\"calselectbox\" value={JSON.stringify(this.state.selectedType)} onChange={this.calSelected}>\n                    {this.state.calibrationTableItems}\n            </select>\n            \n            </div>\n            <span className=\"selectedSpan\">Selected: {this.state.selectedType.name}</span>\n            {this.renderInputs()}\n            {this.renderNameInput()}\n            {this.renderSelectedValues()}\n            {this.renderButtons()}\n            </div>\n        )\n    }\n    render(){\n        return(\n            <div className=\"modalz\">\n            <div className=\"modal_content\">\n                <div className=\"modalTopBar\">\n                    <div className=\"modalTitlez\"><div className=\"titletext\">Calibration</div></div>\n                <div className=\"exitButtonz\" onClick={this.handleClick}><div style={{display:\"table-cell\",verticalAlign:\"middle\",fontSize:\"30px\",fontWeight:\"bold\"}}>&times;</div></div>\n                \n                </div>\n                {this.renderContent()}\n                \n            </div>\n        </div>\n        );\n    }\n}","import React from 'react';\nimport './components.css'\nimport CalibrationPop from './calibrationPop';\n\nexport default class OffsetButton extends React.Component\n{\n    state = {\n        seen:false\n    };\n\n    togglePop = () =>{\n        this.setState({seen: !this.state.seen});\n    };\n\n    render()\n    {\n        return(\n            <div>\n                <button className=\"hiddenButton\" style={{marginleft:\"10%\"}} onClick={this.togglePop}>Calibrate</button>\n                {this.state.seen ? <CalibrationPop toggle={this.togglePop} /> : null}\n            </div>\n        );\n    }\n\n    \n}","import React from 'react';\nimport './components.css'\n\nexport default class LogNotifier extends React.Component\n{\n    state = {\n        logStatus: \"Not Logging!\",\n        logState: this.props.logState\n    }\n\n    update = () =>{\n        this.setState({logStatus:\"Logging\"});\n    };\n    componentDidUpdate(prevProps){\n        if(this.props.logState !== prevProps.logState)\n        {\n            this.setState({logState:!this.state.logState})\n        }\n    }\n    render(){\n\n        return(\n\n             <div>\n           \n                 {this.state.logState === false &&\n                 <div className = \"logNotifierMain\" style= {{backgroundColor:\"red\"}}>\n                <div className = \"logNotText\">Not Logging!</div>\n                </div>\n                }\n              </div>  \n            \n\n\n\n\n\n        );\n\n\n    }\n\n}","import React from 'react'\n//import './pidModule.css'\nimport './settingsmod.css'\nimport KeyPadInput from './keypadInput';\n\nexport default class PidPopup extends React.Component\n{\n\n    constructor(props,)\n    {\n        super(props);\n        this.state = {\n            kProp:this.props.kp,\n            kInt:this.props.ki,\n            kDer:this.props.kd,\n            volLim:this.props.volLim,\n        }\n    }\n\n    OnKpChange = (value) =>{\n        this.setState({kProp:value})\n    };\n\n    OnKiChange = (value) =>{\n        this.setState({kInt:value})\n    };\n\n    OnKdChange = (value) =>{\n        this.setState({kDer:value})\n    };\n\n    OnVLChange = (value) =>{\n        this.setState({volLim:value})\n    };\n    \n    SaveValues = () =>{\n        this.props.onSet(this.state.kProp,this.state.kInt,this.state.kDer,this.state.volLim)\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({\n            \n                gProp:this.state.kProp,\n                gInt:this.state.kInt,\n                gDer:this.state.kDer,\n                volLim:this.state.volLim\n            })\n        }\n\n        fetch(\"http://localhost:3005/pid\",requestOptions)\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n        \n        this.props.toggle();\n        \n    }\n\n    CloseWindow = () => {\n        this.props.toggle();\n    }\n    render()\n    {\n        return(\n\n            <div className=\"modal\" >\n                <div className=\"modal_content\">\n                    <div className=\"modalTopBar\">\n                        <div className=\"modalTitle\"><div className=\"titletext\">PID Control Settings</div></div>\n                        <div className=\"exitButton\" onClick={this.CloseWindow}><div style={{display:\"table-cell\",verticalAlign:\"middle\",fontSize:\"30px\",fontWeight:\"bold\"}}>&times;</div></div>\n                    </div>\n                    <div className=\"keyBucket\">\n                        <div className=\"keyOrg\">\n                            <div className=\"kTableCell\">\n                                \n                                <div className=\"entitle\"><div className=\"entxt\">Proportional Gain:</div></div>\n                                <div className = \"entry\">\n                               \n                                <KeyPadInput initVal={this.state.kProp} className=\"entry\" onChange={this.OnKpChange}/>\n                                </div>\n                               \n                            </div>\n                            <div className=\"kTableCell\">\n                                <div className=\"entitle\"><div className=\"entxt\">Integral Gain:</div></div>\n                                <div className = \"entry\">\n                                \n                                <KeyPadInput initVal={this.state.kInt} className=\"entry\" onChange={this.OnKiChange}/>\n                                </div>\n                            </div>\n                            <div className=\"kTableCell\">\n                                <div className=\"entitle\"><div className=\"entxt\">Derivative Gain:</div></div>\n                                <div className = \"entry\">\n                                <KeyPadInput initVal={this.state.kDer} className=\"entry\" onChange={this.OnKdChange}/>\n                                \n                                </div>\n                            </div>\n                            <div className=\"kTableCell\">\n                                <div className=\"entitle\"><div className=\"entxt\">Volume Control Flow Limit [mL/min]:</div></div>\n                                <div className = \"entry\">\n        \n                                <KeyPadInput initVal={this.state.volLim} className=\"entry\" onChange={this.OnVLChange}/>\n                                \n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"buttonDiv\">\n                            <button className = \"saveButton\" onClick ={this.SaveValues}>Save</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './components.css';\nimport PidPopup from './pidPopup';\nimport './pidselector.css'\n\nexport default class PidButton extends React.Component\n{   \n    state = {\n        seen:false,\n        kp:0,\n        ki:0,\n        kd:0,\n        vl:0\n    };\n\n    OnButtonPressed = () =>{\n        this.setState({seen:!this.state.seen})\n    }\n\n    SetParams = (_kp,_ki,_kd,_vl) =>{\n            this.setState({\n                kp:_kp,\n                ki:_ki,\n                kd:_kd,\n                vl:_vl\n            });\n    }\n\n    componentDidMount = () =>\n    {\n        //console.log(\"GETTING PARAMS\")\n        fetch(\"http://localhost:3005/getParams\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                this.SetParams(result.kp,result.ki,result.kd,result.vl)\n               \n            },\n\n            (error)=> {\n                \n                \n            }\n        )\n    }\n\n    render()\n    {\n        return(\n        <div>\n            <button className=\"settingsButton\" onClick={this.OnButtonPressed}>{this.props.icon}</button>\n            {this.state.seen ? <PidPopup toggle={this.OnButtonPressed} onSet={this.SetParams} toggle={this.OnButtonPressed} kp={this.state.kp} ki={this.state.ki} kd={this.state.kd} volLim={this.state.vl}/> : null}\n        </div>\n        );\n    }\n\n\n}","\n\nexport default class GraphBuffer {\n\n    constructor(data_len,d_time){\n        this.length = data_len;\n        this.d_time = d_time;\n        this.data = new Array(data_len);\n        this.flow = new Array(data_len).fill(0);\n        this.volume = new Array(data_len).fill(0);\n        this.setpoint = new Array(data_len).fill(0);\n        this.secondary = new Array(data_len).fill(0);\n        this.volumetric = new Array(data_len).fill(0);\n        this.time = new Array(data_len).fill(0);\n        this.extraData = new Array(data_len).fill(0);\n        this.os = new Array(data_len).fill(0);\n        this.datarr = [];\n        this.initData();\n    }\n\n    initData(){\n        var timeBuf = new Date().valueOf() - this.d_time * this.length;\n\n        for(var i = 0; i < this.length; i++)\n        {\n            this.time[i] = new Date(timeBuf);\n            this.data[i] = {\n                        flow:0,\n                        avgFlow: 0,\n                        secUnit: \"\",\n                        secVal: 0,\n                        setPoint: 0,\n                        volume: 0,\n                        offset: 0,\n                        timeStamp: new Date(timeBuf),\n                        extraData:[],\n                        extraDataLen:0,\n                        volread:0\n                        }\n            timeBuf += this.d_time;\n        }\n    }\n    addPoint(flow,aflow,sunit,sval,spoint,volume,exd,volReading){\n        this.data.shift();\n        \n        this.data.push({\n            flow:flow,\n            avgFlow:aflow,\n            secUnit:sunit,\n            secVal:sval,\n            setPoint:spoint,\n            volume:volume,\n            offset: 0,\n            extraData: exd,\n            extraDataLen: exd.length,\n            timeStamp:new Date(),\n            volread:volReading\n        })\n\n        this.flow.shift();\n        this.volume.shift();\n        this.setpoint.shift();\n        this.secondary.shift();\n        this.volumetric.shift();\n        this.time.shift();\n        this.extraData.shift();\n        \n        this.flow.push(aflow);\n        this.volume.push(volume);\n        this.setpoint.push(spoint);\n        this.secondary.push(sval);\n        this.volumetric.push(volReading);\n        this.time.push(new Date());\n        this.extraData.push(exd);\n        \n        this.datarr = [this.flow,this.volume,this.setpoint,this.secondary,this.volumetric,this.time,this.os,this.extraData];\n    }\n\n    getPoints(ratio){\n        let startPoint = this.length - this.length * ratio;\n\n        for(var i = 0 ; i < this.datarr.length; i++)\n        {\n            this.datarr[i] = this.datarr[i].slice(startPoint);\n        }\n\n        return this.datarr;\n    }\n    getData(ratio){\n        let startPoint = this.length - this.length * ratio;\n\n        return this.data.slice(startPoint);\n    }\n\n\n\n}","import { SecondarySelections } from \"./secondaries\";\n\nexport default class SecondaryDataManager {\n    static myInstance = null;\n\n    sensorParams = {\n        sensorType : SecondarySelections[0],\n        unit : \"\",\n        channel: 0,\n        limit: 0.0,\n        reading: 0.0,\n      \n    };\n    volParams = {\n        sensorType : SecondarySelections[0],\n        unit : \"\",\n        channel: 0,\n        limit: 0.0,\n        reading: 0.0,\n    \n    };\n    volAvailable = false;\n    static getInstance(){\n        if(SecondaryDataManager.myInstance == null){\n            SecondaryDataManager.myInstance = new SecondaryDataManager();\n        }\n\n        return this.myInstance;\n    }\n\n    getParams(){\n        return this.sensorParams;\n    }\n    getVolParams()\n    {\n        return this.volParams;\n    }\n    setReading(reading){\n        this.sensorParams.reading = reading;\n    }\n    getReading(){\n      fetch('http://localhost:3005/hmiData')\n      .then(response => response.json())\n      .then(parsedResponse =>{\n            this.sensorParams.reading = parsedResponse.secVal;\n      },\n      (error)=>{\n          \n      })\n        return this.sensorParams.reading;\n    }\n\n    getVolReading(){\n        fetch('http://localhost:3005/hmiData')\n        .then(response => response.json())\n        .then(parsedResponse =>{\n              this.volParams.reading = parsedResponse.volSecReading;\n        },\n        (error)=>{\n            \n        })\n          return this.volParams.reading;\n      }\n  \n    getSecLimit(){\n        fetch('http://localhost:3005/hmiData')\n        .then(response => response.json())\n        .then(parsedResponse =>{\n              this.sensorParams.limit = parsedResponse.secSetPoint;\n              \n        },\n        (error)=>{\n            \n        })\n          return this.sensorParams.limit;\n      }\n    getVolLimit(){\n        fetch('http://localhost:3005/hmiData')\n        .then(response => response.json())\n        .then(parsedResponse =>{\n              this.volParams.limit = parsedResponse.volSetPoint;\n              \n        },\n        (error)=>{\n            \n        })\n          return this.volParams.limit;\n    }\n    setParams(_type,_units,_channel,_limit){\n\n        //console.log(\"Setting Data Manager: \",_type,_units,_channel,_limit);\n        this.sensorParams.sensorType = _type;\n        this.sensorParams.unit = _units;\n        this.sensorParams.channel = _channel;\n        this.sensorParams.limit = _limit\n    }\n    setVolParams(_type,_units,_channel,_limit){\n\n        //console.log(\"Setting Data Manager: \",_type,_units,_channel,_limit);\n        this.volParams.sensorType = _type;\n        this.volParams.unit = _units;\n        this.volParams.channel = _channel;\n        this.volParams.limit = _limit\n    }\n    getVolumeUnits()\n    {\n        if(this.volAvailable) return this.volParams.unit;\n        else return \"mL\";\n    }\n    async sensorAvailable()\n    {\n        var avail = false;\n        await fetch('http://localhost:3005/secondaryAvailable')\n        .then(response => response.json())\n        .then(res =>{\n            avail = res.available;\n           \n            \n        })\n        .catch(err =>{avail = false})\n\n        return avail;\n\n        \n    }\n\n    async volumetricAvailable()\n    {\n        var avail = false;\n        await fetch('http://localhost:3005/volumetricAvailable')\n        .then(response => response.json())\n        .then(res =>{\n            avail = res.available;\n           \n            \n        })\n        .catch(err =>{avail = false})\n        this.volAvailable = avail;\n        return avail;\n\n        \n    }\n    setLimit(lim){\n        this.sensorParams.limit = lim;\n        this.sendBackendUpdate();\n    }\n    setVolLimit(lim){\n        this.volParams.limit = lim;\n        this.sendVolBackendUpdate();\n    }\n    sendBackendUpdate(){\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({\n                type:this.sensorParams.sensorType.int_name,\n                unit:this.sensorParams.unit,\n                limit:this.sensorParams.limit,\n                channel:this.sensorParams.channel\n            })\n        }\n\n        fetch('http://localhost:3005/updateSecParams',requestOptions)\n        .then(res => res.json())\n        .then(\n            (result)=>{\n                //console.log(result)\n            },\n            (error) =>{\n                //console.log(error)\n            }\n        )\n    }\n    sendVolBackendUpdate(){\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({\n                type:this.volParams.sensorType.int_name,\n                unit:this.volParams.unit,\n                limit:this.volParams.limit,\n                channel:this.volParams.channel\n            })\n        }\n\n        fetch('http://localhost:3005/updateVolParams',requestOptions)\n        .then(res => res.json())\n        .then(\n            (result)=>{\n                //console.log(result)\n            },\n            (error) =>{\n                //console.log(error)\n            }\n        )\n    }\n};","import React from 'react';\nimport './components.css';\nimport Plot from 'react-plotly.js'\nimport GraphBuffer from './graphBuffer';\nimport SecondaryDataManager from './secondaryDataManager'\nimport UIController from './uIController';\nimport DataManager from './DataManager';\nconst Influx = require('influx');\nconst bodyParser = require('body-parser');\nvar dateTime = require('node-datetime');\n\nconst rmbuttons =   ['lasso2d',\n 'select2d',\n 'sendDataToCloud',\n 'zoom2d',\n 'pan2d',\n 'zoomIn2d',\n 'zoomOut2d',\n 'autoScale2d',\n 'resetScale2d',\n 'hoverClosestCartesian',\n 'hoverCompareCartesian',\n 'zoom3d',\n 'pan3d',\n 'orbitRotation',\n 'tableRotation',\n 'resetCameraDefault3d',\n 'resetCameraLastSave3d',\n 'hoverClosest3d',\n 'zoomInGeo',\n 'zoomOutGeo',\n 'resetGeo',\n 'hoverClosestGeo',\n 'hoverClosestGl2d',\n 'hoverClosestPie',\n 'toggleHover',\n 'toImage',\n 'resetViews',\n 'toggleSpikelines']\n\nexport default class InfluxGraph extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.state = \n    {\n      gdata:new GraphBuffer(10 * 60 * 10,100),\n      data:[],\n      layout:0,\n      timeStr:'five',\n      graphTimeRatio:0.5,\n      graphRunning:true\n    }\n\n   //setInterval(this.getPointsopt,50);\n  }\n\n    SetTimeFrame = (frame) => {\n      console.log(\"setting timeframe\",frame);\n      this.setState({graphTimeRatio:(frame/10)});\n\n    }\n\n\n    getPointsopt = () =>{\n      var startTime = performance.now()\n\n      const url = 'http://localhost:3005/hmiData';\n \n      let res = DataManager.getInstance().getAllData();\n      this.state.gdata.addPoint(res.flowData.instFlow,res.flowData.avgFlow,res.secData.unit,res.secData.reading,res.flowData.setPoint,res.flowData.volume,res.secData.extraData,res.volData.reading);\n    \n\n      var points = this.state.gdata.getPoints(this.state.graphTimeRatio);\n      \n      let aflow_arr = points[0]\n      let sval_arr = points[3]\n      let sp_arr =  points[2]\n      let ts_arr = points[5]\n      let os_arr = points[6]\n      let vscale_arr = points[4];\n      var ed_tr = points[7];\n      var _ed_len = points[7].length;\n      var ed_traces = [];\n      //console.log(_ed_len)\n      // for(var i = 0; i < _ed_len; i++)\n      // {\n      //   ed_traces.push({\n      //     type: \"scatter\",\n      //     mode: \"lines\",\n      //     x: ts_arr,\n      //     y: ed_tr[i],\n      //     line: {width:1}\n      //   })\n      // }\n\n      const flowTrace = {\n        type: \"scatter\",\n        mode: \"lines\",\n        x: ts_arr,\n        y: aflow_arr,\n        line: {color: '#3963DB',width:3}\n      }\n\n      const osTrace = {\n        type: \"scatter\",\n        mode: \"lines\",\n        x: ts_arr,\n        y: os_arr,\n        line: {color:\"#8D8D8D\"}\n      }\n      const os2Trace = {\n        type: \"scatter\",\n        mode: \"lines\",\n        x: ts_arr,\n        y: os_arr,\n        line: {color:\"#8D8D8D\"},\n        yaxis:'y2'\n      }\n      const avgTrace = {\n        type: \"scatter\",\n        mode: \"lines\",\n        x: ts_arr,\n        y: aflow_arr,\n        line: {color:\"#3ed5f0\"}\n      }\n\n      const spTrace = {\n        type: \"scatter\",\n        mode: \"lines\",\n        x: ts_arr,\n        y: sp_arr,\n        line: {color:\"#f7584d\",width:5}\n      }\n\n      const secValTrace = {\n        type: \"scatter\",\n        mode: \"lines\",\n        x: ts_arr,\n        y: sval_arr,\n        line: {color:'#f5b042',width:3},\n        yaxis:'y2'\n      }\n      const svOffsetTrace = {\n        type: \"scatter\",\n        mode: \"lines\",\n        x: ts_arr,\n        y: os_arr,\n        line: {color:\"#8D8D8D\"},\n        yaxis:'y2'\n      }\n\n      const vscaleTrace = {\n        type: \"scatter\",\n        mode: \"lines\",\n        x: ts_arr,\n        y: vscale_arr,\n        line: {color:'#11bf60',width:3},\n        yaxis:'y2'\n      }\n      const _d = ed_traces;\n      \n      const data = [spTrace,avgTrace,flowTrace,secValTrace,svOffsetTrace,vscaleTrace,osTrace,os2Trace]\n      \n      //console.log(data[3].y[2999]);\n      const layout = {\n        height:window.innerHeight * 0.9,\n        showlegend:false,\n        yaxis:{\n          title:'ml/min'\n        },\n        yaxis2: {\n          overlaying:'y',\n          side:'right',\n          title: SecondaryDataManager.getInstance().getParams().unit,\n        },\n        \n        margin:{    \n          t: 25,\n          l: 25\n         }\n        \n      };\n      \n      if(this.state.graphRunning){\n        //console.log('setstate')\n        this.setState({layout:layout,data:data});\n      }\n      var endtime = performance.now()\n      //console.log(endtime - startTime)\n    }\n  \n\n    stopGraphDelayed = () =>{\n      console.log(\"Stopping Graph\");\n      this.setState({graphRunning:false});\n    }\n\n    ssButtonAssert = (start) =>{\n      //console.log(\"asser start\",start)\n   \n        this.setState({graphRunning:start});\n\n      \n      \n      \n    }\n    componentDidMount =() =>{\n      UIController.getInstance().addStopStartCallback(this.ssButtonAssert);\n      DataManager.getInstance().OnPoll(this.getPointsopt);\n      DataManager.getInstance().OnRunningChange(this.ssButtonAssert);\n      //Start w/ graph running to have it formatted correctly.\n      //setTimeout(this.stopGraphDelayed,2000);\n    }\n    render()\n    {\n      \n\n      return(\n        <div className=\"graphContainer\">\n          <div className=\"graph\">\n            <Plot \n                  data = {this.state.data}\n                  layout = {this.state.layout}\n                  config={{displayModeBar:false,modeBarButtonsToRemove:rmbuttons,responsive:true}}\n                  style={{bottom:'10%',right:'10%'}}\n              />\n          </div>\n\n          <div className = \"tfContainer\">\n                    {this.state.graphTimeRatio === 1&&\n                        <div>\n                        <button className=\"timeFrameButton\" onClick={() => {this.SetTimeFrame(1)}}>1 Minute</button>\n                        <button className=\"timeFrameButton\" onClick={() => {this.SetTimeFrame(5)}}>5 Minutes</button>\n                        <button className=\"timeFrameButtonF\" onClick={() => {this.SetTimeFrame(10)}}>10 Minutes</button>\n                        </div>\n                    }\n\n                    {this.state.graphTimeRatio === 0.5 &&\n                        <div>\n                        <button className=\"timeFrameButton\" onClick={() => {this.SetTimeFrame(1)}}>1 Minute</button>\n                        <button className=\"timeFrameButtonF\" onClick={() => {this.SetTimeFrame(5)}}>5 Minutes</button>\n                        <button className=\"timeFrameButton\" onClick={() => {this.SetTimeFrame(10)}}>10 Minutes</button>\n                        </div>\n                    }\n\n                    {this.state.graphTimeRatio === 0.1 &&\n                        <div>\n                        <button className=\"timeFrameButtonF\" onClick={() => {this.SetTimeFrame(1)}}>1 Minute</button>\n                        <button className=\"timeFrameButton\" onClick={() => {this.SetTimeFrame(5)}}>5 Minutes</button>\n                        <button className=\"timeFrameButton\" onClick={() => {this.SetTimeFrame(10)}}>10 Minutes</button>\n                        </div>\n                    }\n\n                </div>\n        </div>\n        );\n    }\n\n\n}","import React from 'react'\nimport './components.css'\nimport './pidselector.css'\nimport { Button } from 'semantic-ui-react'\nimport { faCog } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PidButton from './pidButton';\nimport KeyPadInput from './keypadInput'\nimport SecondaryDataManager from './secondaryDataManager'\nimport DataManager from './DataManager'\nconst color_blue = '#54D3FF';\nconst color_green = '#47C970'\nexport default class PidSelector extends React.Component\n{\n    //Control States:\n    // 0: Flow\n    // 1: Volume\n    \n    constructor(props)\n    {\n      super(props);\n      this.state = \n      {\n        controlState:0,\n        flowset:0,\n        volset: 0,\n        settingsOpen:false,\n        bColor: color_blue,\n        vunit: \"mL\",\n        volumeOnSecondary: false\n      }\n  \n    }\n    SetControlState = (state) => {\n        this.setState({controlState:state});\n        this.props.OnStateChange(state);\n        this.setState({bColor:color_blue});\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({\n                mode:state\n         \n            })\n\n            \n        }\n\n        fetch(\"http://localhost:3005/controlmode\",requestOptions)\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n    }\n    \n\n    OnSetPointChange = (value) => {\n        this.setState({bColor:color_blue});\n        this.setState({flowset:value});\n        //console.log(this.state.flowset)\n    }\n\n    SetSetpoint = () => {\n        //console.log('click')\n        this.setState({bColor:color_green});\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({\n                setPoint:this.state.flowset,\n         \n            })\n        }\n\n        fetch(\"http://localhost:3005/flowsetpoint\",requestOptions)\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n        \n\n    }\n\n    SetVolume = () => {\n        this.setState({bColor:color_green});\n        //console.log(this.state.volset)\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({\n                volDisp:this.state.volset,\n                volumetric:this.state.volumeOnSecondary\n            })\n        }\n\n        fetch(\"http://localhost:3005/voldisp\",requestOptions)\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n    }\n\n    \n\n    GetSetPoint = () => {\n        //console.log(\"getttt\")\n        fetch(\"http://localhost:3007/getsetpt\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                //console.log(result)\n                const setpt = result[0].last;\n                this.setState({flowset:setpt});\n                ////console.log(peakAvg);\n               \n            },\n\n            (error)=> {\n                \n            \n            }\n        )\n    }\n\n    GetVolPoint = () => {\n        fetch(\"http://localhost:3007/getvolpt\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                //console.log(result)\n                const setpt = result[0].last;\n                this.setState({volset:setpt});\n                ////console.log(peakAvg);\n               \n            },\n\n            (error)=> {\n                \n            \n            }\n        )\n    }\n\n    OnVolSetPointChange = (set) =>{\n\n        this.setState({volset:set});\n        this.setState({bColor:color_blue});\n    }\n\n    OpenSettings = () =>{\n        this.setState({settingsOpen:true});\n    }\n\n    componentDidMount = () =>{\n        this.GetSetPoint();\n        this.SetControlState(0);\n\n        \n        setInterval(this.GetUnit,150);\n    }\n    GetUnit = () =>{\n        var _dat = DataManager.getInstance().getVolumetricData();\n        //console.log(_dat)\n        var unit = _dat.unit;\n        var vol_secondary = false;\n        if(unit != \"null\")\n        {\n            vol_secondary = true;\n        }\n        this.setState({vunit:unit,volumeOnSecondary:vol_secondary});\n    }\n    render(){\n        //console.log(this.state.bColor)\n        return(\n            \n        <div className=\"pidSection\">\n            <div className=\"innerPidSection\">\n                \n                {this.state.controlState === 0 &&\n                <div className=\"buttonHDiv\">\n                    <div className=\"modeDiv\">\n                <Button.Group className=\"buttonGroup\">\n                    <Button className=\"selButtonFh\">Flow</Button>\n                    <Button className=\"selButtonV\" onClick={() => {this.SetControlState(1)}}>Volume</Button>\n                </Button.Group>\n                </div>\n\n                \n                <PidButton icon = {<FontAwesomeIcon icon = {faCog} size=\"2x\" color=\"white\"></FontAwesomeIcon>}></PidButton>\n                </div>\n            \n                }\n                {this.state.controlState === 1 &&\n                <div className=\"buttonHDiv\">\n                    <div className=\"modeDiv\">\n                <Button.Group className=\"buttonGroup\">\n                    <Button className=\"selButtonF\" onClick={() => {this.SetControlState(0)}}>Flow</Button>\n                    <Button className=\"selButtonVh\">Volume</Button>\n                </Button.Group>\n                </div>\n                <PidButton icon = {<FontAwesomeIcon icon = {faCog} size=\"2x\" color=\"white\"></FontAwesomeIcon>}></PidButton>\n                </div>\n                }\n                <div className=\"lowerPidSection\">\n                    {this.state.controlState === 0 &&\n                        <div className = \"fieldCont\">\n                            <div className = \"spField\">\n                                <span style={{color:\"white\",fontSize:\"12px\"}}>Flow Setpoint [mL/min]</span>\n                               \n                                <KeyPadInput initVal={this.state.flowset}onChange={this.OnSetPointChange}/>\n                                <button className = \"spButton\" onClick = {this.SetSetpoint} style={{backgroundColor:this.state.bColor}}>Set</button>\n                            </div>\n                        </div>\n                    }\n                    {this.state.controlState === 1 &&\n                        <div className = \"fieldCont\">\n                            <div className = \"spField\">\n                                <span style={{color:\"white\",fontSize:\"12px\"}}>Volume Setpoint [{this.state.vunit}]</span>\n                            \n                                <KeyPadInput initVal={this.state.volset} onChange={this.OnVolSetPointChange}/>\n                                <button className = \"spButton\" onClick = {this.SetVolume} style={{backgroundColor:this.state.bColor}}>Set</button>\n                            </div>\n                        </div>\n                    }\n                </div>\n\n            </div>\n\n        </div>)\n    }\n\n\n}","import React from 'react';\n\nimport './offsetPop.css'\nimport OffsetInput from './keyInput'\nexport default class OffsetPop extends React.Component\n{\n\n    handleClick = () =>{\n        this.props.toggle();\n    };\n    state = {\n        volOs:0\n    }\n    getOffset = () =>{\n        fetch(\"http://localhost:3005/getvOffset\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                const os = result.offset;\n                this.setState({volOs:os});\n                ////console.log(peakAvg);\n               \n            },\n\n            (error)=> {\n                \n         \n            }\n        )\n    }\n\n\n\n    componentDidMount = () =>{\n        this.getOffset();\n    }\n    render(){\n        return(\n            <div className=\"modal\" style={{height:\"40%\",width:\"40%\",top:\"30%\",left:\"30%\"}}>\n            <div className=\"modal_content\">\n                <div className=\"modalTopBar\">\n                    <div className=\"modalTitlez\"><div className=\"titletext\">Set Volume Calibration (Current: {this.state.volOs})</div></div>\n                <div className=\"exitButtonz\" onClick={this.handleClick}><div style={{display:\"table-cell\",verticalAlign:\"middle\",fontSize:\"30px\",fontWeight:\"bold\"}}>&times;</div></div>\n                </div>\n                \n                <OffsetInput flipped={this.props.flipped} osType={'1'} closeFunc ={this.handleClick}/>\n            </div>\n        </div>\n        );\n    }\n}","import React from 'react';\nimport Keyboard from 'react-simple-keyboard';\nimport 'react-simple-keyboard/build/css/index.css';\nimport { FormTextArea, Sidebar } from 'semantic-ui-react';\nimport './secondaryPop.css'\nimport { SecondarySelections, VolumetricSelections } from './secondaries';\nimport SecondaryDataManager from './secondaryDataManager';\nimport KeyPadInput from './keypadInput';\n\nconst color_blue = '#54D3FF';\nconst color_green = '#47F185';\nconst numpadLayout = {\n    default:[\n            '{enter} {bksp}',\n                '1 2 3',\n                '4 5 6',\n                '7 8 9',\n                '- 0 .'\n    ]\n}\nexport default class SecondaryPop extends React.Component {\n\n    handleClick = () => {\n        this.props.toggle();\n    };\n\n    constructor(props)\n    {\n        super(props);\n        this.__sel = SecondarySelections;\n        if(this.props.volumetric)\n        {\n           this.__sel = VolumetricSelections;\n        }\n\n        this.state = {\n            selectedType: this.__sel[0],\n            selectedTypeIdx: 0,\n            selectedUnit: \"\",\n            selectedChannel: 1,\n            typeList: [],\n            unitList: [],\n            channelList: [],\n            selectedLimit:0,\n            selectedLimitStr:\"0\",\n            showKeyboard: false,\n            confirmColor:color_blue,\n            volSelected:false\n        }\n    \n    }\n\n\n\n    buttonBlue = () =>{\n        this.setState({confirmColor:color_blue});\n    }\n\n    buttonGreen = () =>{\n        this.setState({confirmColor:color_green});\n    }\n    onChange = (input) => {\n        this.setState({ selectedLimitStr: input })\n        this.buttonBlue();\n    }\n    onKeyPress = (button) => {\n        if (button === \"{shift}\" || button === \"{lock}\") this.handleShift();\n        else this.setState({ layoutName: \"default\" });\n    }\n\n    populateLists = () => {\n\n        for (var i = 0; i < this.__sel.length; i++) {\n            this.state.typeList.push(<option value={JSON.stringify(this.__sel[i])}>{this.__sel[i].name}</option>);\n        }\n\n        this.forceUpdate();\n    }\n    populateUnits = (type) => {\n        this.state.unitList = [];\n\n        for (var i = 0; i < type.units.length; i++) {\n            this.state.unitList.push(<option value={JSON.stringify(type.units[i])}>{type.units[i]}</option>)\n        }\n    }\n\n    populateChannels = (type) =>{\n        this.state.channelList = [];\n        for(var i = 0; i < type.channels.length;i++){\n            this.state.channelList.push(<option value={JSON.stringify(type.channels[i])}>{type.channels[i]}</option>)\n        }\n    }\n    typeSelected = (event) => {\n       \n        // if (selType !== this.state.selectedType) {\n        //     this.populateUnits(selType);\n        // }\n        \n        const val = JSON.parse(event.target.value);\n        this.populateUnits(val)\n        this.populateChannels(val)\n        //console.log(\"Selected Sensor Type: \",val.name);\n        this.setState({ selectedType: val,selectedUnit:val.units[0],selectedChannel:val.channels[0], volSelected:val.volumetric});\n        this.buttonBlue();\n\n    }\n    unitSelected = (event) => {\n        const val = JSON.parse(event.target.value);\n        //console.log(\"Selected Unit: \",val);\n        this.setState({selectedUnit: val});\n        this.buttonBlue();\n    }\n\n    channelSelected = (event) =>{\n        const val = JSON.parse(event.target.value);\n        //console.log(\"Selected Channel: \",val);\n        this.setState({selectedChannel:val})\n        this.buttonBlue();\n    }\n    getTypeIdx = () =>{\n        return this.__sel.indexOf(this.state.selectedType);\n    }\n\n    SetParams = () =>{\n\n        const f_limit = parseFloat(this.state.selectedLimitStr);\n\n        //console.log(\"Setting Params: \")\n        //console.log(\"Type: \",this.state.selectedType.name);\n        //console.log(\"Units: \",this.state.selectedUnit);\n        //console.log(\"Channel: \",this.state.selectedChannel);\n        //console.log(\"Limit: \",f_limit);\n        if(this.props.volumetric === undefined){\n        SecondaryDataManager.getInstance().setParams(this.state.selectedType,this.state.selectedUnit,this.state.selectedChannel,f_limit);\n        }else{\n            SecondaryDataManager.getInstance().setVolParams(this.state.selectedType,this.state.selectedUnit,this.state.selectedChannel,f_limit); \n        }\n        this.props.onParamUpdate();\n        this.buttonGreen();\n        \n    }\n    componentDidMount = () => {\n        //console.log(\"Secondary POP SHOWN\")\n\n        this.populateLists();\n    }\n    limSelect = () =>{\n        this.setState({showKeyboard:true});\n    }\n\n    limBlurred = () =>{\n        \n    }\n\n    limChanged = (event) =>{\n        var limStr = event.target.value;\n     \n\n        this.setState({selectedLimitStr:limStr});\n    }\n    renderConnect = () => {\n        return (\n            <div className=\"modalz\">\n                <div className=\"modal_content\">\n                    <div className=\"modalTopBar\">\n                        <div className=\"modalTitlez\"><div className=\"titletext\">Select Secondary Process Variable</div></div>\n                        <div className=\"exitButtonx\" onClick={this.handleClick}><div style={{ display: \"table-cell\", verticalAlign: \"middle\", fontSize: \"30px\", fontWeight: \"bold\" }}>&times;</div></div>\n                    </div>\n                    <form className=\"secForm\">\n                        <div className=\"formDivwLabel\">\n                            <label className=\"secformLabel\">Sensor Type:</label>\n                            <select className=\"mainUnitDropdown\" size=\"8\" id=\"selectbox\" value={JSON.stringify(this.state.selectedType)} onChange={this.typeSelected}>\n                                {this.state.typeList}\n                            </select>\n                        </div>\n                        <div className=\"formDivwLabel\">\n                            <label className=\"secformLabel\">Units:</label>\n                            <select className=\"mainUnitDropdown\" size=\"8\" id=\"selectbox\" value={JSON.stringify(this.state.selectedUnit)} onChange={this.unitSelected}>\n                                {this.state.unitList}\n                            </select>\n                        </div>\n\n                        <div className=\"formDivwLabel\">\n                        <label className=\"secformLabel\">Channel:</label>\n                            <select className=\"mainUnitDropdown\" size=\"8\" id=\"selectbox\" value={JSON.stringify(this.state.selectedChannel)} onChange={this.channelSelected}>\n                                {this.state.channelList}\n                            </select>     \n                        </div>\n\n                    </form>\n\n                    <div className=\"limContainer\">\n                        {!this.state.volSelected ?\n                        <>\n                        <span className=\"limPref\">Setpoint: </span>\n                        <KeyPadInput className=\"limInput\" onChange={this.onChange}/>\n                        <span className=\"limSuff\">{this.state.selectedUnit}</span>\n                        </>\n                        :\n                        <span style={{left:'12%',position:'absolute'}}>Volume to Dispense Set in PID Menu.</span>\n                        }\n                        {/* <input className=\"limInput\" type=\"text\" name=\"limInput\" value={this.state.selectedLimitStr} onChange={this.limChanged} onSelect={this.limSelect} onBlur={this.limBlurred}></input> */}\n                        \n                    </div>\n                    <button className=\"confirmButton\" style={{backgroundColor:this.state.confirmColor}} onClick={this.SetParams}>Confirm</button>\n\n                </div>\n\n               \n            </div>\n\n\n        );\n    }\n\n\n    renderContent = () => {\n\n        return this.renderConnect();\n\n    }\n    render() {\n        return (\n            <>\n                {this.renderContent()}\n            </>\n        )\n    }\n}","import React from 'react';\nimport './components.css'\nimport OffsetPopvol from './offsetPopVol'\n\nexport default class OffsetButtonVol extends React.Component\n{\n    state = {\n        seen:false\n    };\n\n    togglePop = () =>{\n        this.setState({seen: !this.state.seen});\n    };\n\n    render()\n    {\n        return(\n            <div>\n                <button className=\"hiddenButton\" style={{marginleft:\"10%\"}} onClick={this.togglePop}>Calibrate</button>\n                {this.state.seen ? <OffsetPopvol flipped={this.props.flipped} toggle={this.togglePop} /> : null}\n            </div>\n        );\n    }\n\n    \n}","import React from 'react'\nimport './components.css'\nimport './secondaryPanel.css'\nimport { Button } from 'semantic-ui-react'\nimport { faCog, faRulerCombined } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PidButton from './pidButton';\nimport SecondaryPop from './secondaryPop'\nimport SecondaryDataManager from './secondaryDataManager'\nimport { SecondarySelections } from './secondaries'\nimport KeyPadInput from './keypadInput'\nconst color_blue = '#54D3FF';\nconst color_green = '#47C970'\n\nfunction toHex(c)\n{\n    var hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n}\nfunction gethtmlfromrgb(r,g,b)\n{\n    return '#' + toHex(Math.round(r)) + toHex(Math.round(g)) + toHex(Math.round(b));\n}\nfunction genGreenToReds()\n{\n    var red = 0;\n    var green = 255;\n    var buf = []\n    const stepSize = 255/49.5;\n\n    while(red < 255)\n    {\n        red += stepSize;\n        if(red > 255) red = 255;\n        buf.push(gethtmlfromrgb(red,green,0));\n    }\n    while(green > 0){\n        green -= stepSize;\n        if(green < 0) green = 0;\n        buf.push(gethtmlfromrgb(red,green,0));\n    }\n\n    return buf;\n\n}\n\nconst greenredGradient = genGreenToReds();\nfunction getGreenToRedColorFromPct(pct)\n{\n    if(pct > 99) pct = 99;\n    var _ipct = 99 - pct\n    return greenredGradient[Math.round(_ipct)]\n}\n\nconst status_ready = <text style={{fontWeight:'bold',color:'limegreen',float:'right'}}>CONNECTED</text>;\nconst status_nready = <text style={{fontWeight:'bold',color:'red',float:'right'}}>DISCONNECTED</text>\nexport default class SecondaryPanel extends React.Component\n{\n\n    constructor(props)\n    {\n      super(props);\n      this.state = {\n          measurementType : SecondarySelections[0],\n          measurementUnit : \"\",\n          measurementLimit : 0,\n          measLimBuf:0,\n          measurementChannel: 0,\n          currentReading : 0,\n          guageColor:getGreenToRedColorFromPct(0),\n          seen : false,\n          statusUI:status_ready,\n          measLimInput:0\n      }\n    }\n\n    openSetup = () =>{\n        const seen = this.state.seen;\n        this.setState({seen:!seen});\n    }\n\n    loadDefault = () =>{\n        SecondaryDataManager.getInstance().setParams(SecondarySelections[1],\"psi\",1,15);\n        SecondaryDataManager.getInstance().sendBackendUpdate();\n        var params = SecondaryDataManager.getInstance().getParams();\n        this.setState({\n            measurementType: params.sensorType,\n            measurementUnit: params.unit,\n            measurementLimit:params.limit,\n            measurementChannel:params.channel\n        });\n    }\n    onParamsChanged = ()=>{\n\n        const dataManager = SecondaryDataManager.getInstance();\n        const params = dataManager.getParams();\n        //console.log(params);\n        this.setState({\n            measurementType: params.sensorType,\n            measurementUnit: params.unit,\n            measurementLimit:params.limit,\n            measurementChannel:params.channel\n        });\n\n        dataManager.sendBackendUpdate();\n    }\n    updateReading = () =>{\n        if(this.state.seen) return;\n\n        const dataManager = SecondaryDataManager.getInstance();\n      //  console.log(dataManager.getSecLimit())\n        this.setState({currentReading:dataManager.getReading().toFixed(2),measurementLimit:dataManager.getSecLimit()})\n\n        var rd = (this.state.currentReading * 100)/this.state.measurementLimit;\n\n        if(rd > 99) rd = 99;\n        //console.log(rd);\n        this.setState({guageColor:getGreenToRedColorFromPct(rd)});\n\n    }\n    sensorAvailable = async() =>{\n        \n        if( await SecondaryDataManager.getInstance().sensorAvailable())\n        {\n            this.setState({statusUI:status_ready});\n        }else{\n            this.setState({statusUI:status_nready})\n        }\n    }\n    componentDidMount = () =>{\n        this.loadDefault();\n    \n        \n        setInterval(this.updateReading,100);\n        setInterval(this.sensorAvailable,500);\n    }\n    onLimchange = (newVal) =>{\n        \n        if(isNaN(newVal)){\n            //console.log(\"neval nan\")\n            newVal = 0.0;\n        }\n       // console.log(newVal)\n        this.setState({measLimInput:newVal})\n        if(this.keyPadRef){\n        this.keyPadRef.setVal(newVal);\n        }\n    }\n    applyLimChange = () =>{\n      //  console.log(\"SETTING LIMIT!!!\",this.state.measLimInput)\n        SecondaryDataManager.getInstance().setLimit(this.state.measLimInput);\n        \n    }\n    render(){\n        if(this.props.shallRender){\n        return(\n        <div className=\"innersecSection\">\n\n           \n            \n            <span style={{color:\"white\",fontSize:\"14px\",alignSelf:\"left\"}}>{this.state.measurementType.name} CH {this.state.measurementChannel}   {this.state.statusUI}</span>\n            <div className=\"lowerSecDiv\">\n            <KeyPadInput keyPadRef={r => (this.keypad = r)} overrideval={this.state.measurementLimit} className=\"outLimInput\" onEnter={this.applyLimChange} onChange={this.onLimchange}/>\n            <button className = \"secButton\" onClick = {this.openSetup} style={{backgroundColor:color_blue}}>Setup</button>\n\n            </div>\n            <div className=\"sguage\">\n            <div className = \"sflowBox\" >\n                <div className=\"sinnerFlowBox\" >\n                    <div className=\"sdivider\"></div>\n                    <div className=\"sdivider\" style={{top:\"-35%\"}}>{this.state.currentReading}/{this.state.measurementLimit}</div>\n                </div>\n                <div className=\"sinnerFlowBoxL\" style={{backgroundColor:this.state.guageColor}}>\n                    <div className=\"sdivider\"></div>\n                    <div className=\"sdivider\" style={{top:\"-35%\"}}>{this.state.measurementUnit}</div>\n                </div>\n            </div>\n            </div>   \n         \n            {this.state.seen ? <SecondaryPop flipped={this.props.flipped} toggle={this.openSetup} onParamUpdate={this.onParamsChanged}/> : null}\n\n        </div>)\n        }else return null;\n    }\n\n\n}","\nexport default class EnvManager\n{\n    static _instance = null;\n    envVars = {\n        rotate: false\n    };\n    didLoad = false;\n\n    static getInstance(){\n        if(EnvManager._instance == null){\n            EnvManager._instance = new EnvManager();\n        }\n\n        return this._instance;\n    }\n    envsLoaded(){\n        return this.didLoad;\n    }\n    loadVariables(){\n        fetch(\"http://localhost:3005/getEnvVars\")\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                //console.log(\"ENV RES:\",result)\n                this.envVars.rotate = result.rotate;\n                this.didLoad = true;\n            },\n\n            (error)=> {\n               \n            }\n        )\n    }\n\n    shouldRotate(){\n        //console.log(\"SHOULD ROTATE:\",this.envVars.rotate)\n        return this.envVars.rotate;\n    }\n\n\n}","import React from 'react';\n\nimport './components.css'\nimport { wait } from '@testing-library/react';\n\n\nexport default class PurgeButton extends React.Component\n{\n    \n    constructor(props)\n    {\n       \n        super(props);\n        this.state = {\n            purging:false,\n            color:'white'\n        }\n    }\n\n    holdStart = () =>{\n        //console.log(\"HOLDING PURGE BUTTON\");\n        this.setState({purging:true,color:'limegreen'})\n    }\n\n    holdEnd = () =>{\n        //console.log(\"RELEASE PURGE BUTTON\");\n        this.setState({purging:false,color:'white'})\n    }\n    render()\n    {\n        return(\n            <div>\n                <button className=\"purgeButton\" style={{backgroundColor:this.state.color}} onMouseDown={this.holdStart} onMouseUp={this.holdEnd}>Max Purge</button>\n\n          </div>\n           \n        );\n    }\n}","import React from 'react';\nimport './components.css'\nimport DataManager from './DataManager';\nimport UIController from './uIController';\n\nexport default class PrimeButton extends React.Component\n{\n    state = {\n        seen:0,\n        loggingMsg:'Start Logging',\n        fName : \"\",\n        sColor: '#60E570',\n    };\n\n    available = true;\n    sendBackend = (state) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({\n                state:state\n         \n            })\n\n            \n        }\n\n        fetch(\"http://localhost:3005/prime\",requestOptions)\n        .then(res => res.json())\n        .then(\n            (result) =>{\n                \n                \n            },\n\n            (error)=> {\n             \n            }\n        )\n    }\n    setHeld = () =>{\n        if(!this.available) return;\n        this.setState({sColor:\"red\"});\n        this.sendBackend(true);\n    }\n    setReleased = () =>{\n        if(!this.available) return;\n        this.setState({sColor:\"#60E570\"});\n        this.sendBackend(false);\n    }\n    ssFunc = (state) =>{\n        this.available = !state;\n        var _color = \"grey\";\n        if(!state){\n            _color = \"#60E570\";\n        }\n        //console.log('sdasddasd')\n        this.setState({sColor:_color});\n    }\n    componentDidMount = () =>{\n        DataManager.getInstance().OnRunningChange(this.ssFunc);\n    }\n    render()\n    {\n        return(\n            <div>\n                <button className=\"primeButton\" style={{backgroundColor:this.state.sColor}} onTouchStart={this.setHeld} onTouchEnd={this.setReleased} onMouseDown={this.setHeld} onMouseUp={this.setReleased}>Prime</button>\n      \n            </div>\n        );\n    }\n}","import React from 'react'\nimport './components.css'\nimport './secondaryPanel.css'\nimport { Button } from 'semantic-ui-react'\nimport { faCog, faRulerCombined } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PidButton from './pidButton';\nimport SecondaryPop from './secondaryPop'\nimport SecondaryDataManager from './secondaryDataManager'\nimport { VolumetricSelections } from './secondaries'\nimport KeyPadInput from './keypadInput'\nimport DataManager from './DataManager'\nconst color_blue = '#54D3FF';\nconst color_green = '#47C970'\n\nfunction toHex(c)\n{\n    var hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n}\nfunction gethtmlfromrgb(r,g,b)\n{\n    return '#' + toHex(Math.round(r)) + toHex(Math.round(g)) + toHex(Math.round(b));\n}\nfunction genGreenToReds()\n{\n    var red = 0;\n    var green = 255;\n    var buf = []\n    const stepSize = 255/49.5;\n\n    while(red < 255)\n    {\n        red += stepSize;\n        if(red > 255) red = 255;\n        buf.push(gethtmlfromrgb(red,green,0));\n    }\n    while(green > 0){\n        green -= stepSize;\n        if(green < 0) green = 0;\n        buf.push(gethtmlfromrgb(red,green,0));\n    }\n\n    return buf;\n\n}\n\nconst greenredGradient = genGreenToReds();\nfunction getGreenToRedColorFromPct(pct)\n{\n    if(pct > 99) pct = 99;\n    var _ipct = 99 - pct\n    return greenredGradient[Math.round(_ipct)]\n}\n\nconst status_ready = <text style={{fontWeight:'bold',color:'limegreen',float:'right'}}>CONNECTED</text>;\nconst status_nready = <text style={{fontWeight:'bold',color:'red',float:'right'}}>DISCONNECTED</text>\nexport default class VolumetricPanel extends React.Component\n{\n\n    constructor(props)\n    {\n      super(props);\n      this.state = {\n          measurementType : VolumetricSelections[0],\n          measurementUnit : \"\",\n          measurementLimit : 0,\n          measLimBuf:0,\n          measurementChannel: 0,\n          currentReading : 0,\n          guageColor:getGreenToRedColorFromPct(0),\n          seen : false,\n          statusUI:status_ready,\n          measLimInput:0\n      }\n    }\n\n    openSetup = () =>{\n        const seen = this.state.seen;\n        this.setState({seen:!seen});\n    }\n\n    loadDefault = () =>{\n        SecondaryDataManager.getInstance().setVolParams(VolumetricSelections[1],\"g\",1,15);\n        SecondaryDataManager.getInstance().sendVolBackendUpdate();\n        var params = SecondaryDataManager.getInstance().getVolParams();\n        this.setState({\n            measurementType: params.sensorType,\n            measurementUnit: params.unit,\n            measurementLimit:params.limit,\n            measurementChannel:params.channel\n        });\n    }\n    onParamsChanged = ()=>{\n\n        const dataManager = SecondaryDataManager.getInstance();\n        const params = dataManager.getVolParams();\n        //console.log(params);\n        this.setState({\n            measurementType: params.sensorType,\n            measurementUnit: params.unit,\n            measurementLimit:params.limit,\n            measurementChannel:params.channel\n        });\n\n        dataManager.sendVolBackendUpdate();\n    }\n    updateReading = () =>{\n        if(this.state.seen) return;\n\n        const dataManager = DataManager.getInstance();\n        const _voldata = dataManager.getVolumetricData();\n        this.setState({currentReading:_voldata.reading.toFixed(2),measurementLimit:_voldata.setpoint,measurementUnit:_voldata.unit});\n        this.sensorAvailable(_voldata.available);\n        var rd = (this.state.currentReading * 100)/this.state.measurementLimit;\n\n        if(rd > 99) rd = 99;\n        //console.log(rd);\n        this.setState({guageColor:getGreenToRedColorFromPct(rd)});\n\n    }\n    sensorAvailable = (avail) =>{\n        \n        if( avail )\n        {\n            this.setState({statusUI:status_ready});\n        }else{\n            this.setState({statusUI:status_nready})\n        }\n    }\n    componentDidMount = () =>{\n       // this.loadDefault();\n        this.sensorAvailable(false);\n        \n        DataManager.getInstance().OnPoll(this.updateReading);\n\n    }\n    onLimchange = (newVal) =>{\n        \n        if(isNaN(newVal)){\n            //console.log(\"neval nan\")\n            newVal = 0.0;\n        }\n       // console.log(newVal)\n        this.setState({measLimInput:newVal})\n        if(this.keyPadRef){\n        this.keyPadRef.setVal(newVal);\n        }\n    }\n    applyLimChange = () =>{\n      //  console.log(\"SETTING LIMIT!!!\",this.state.measLimInput)\n        SecondaryDataManager.getInstance().setVolLimit(this.state.measLimInput);\n        \n    }\n    render(){\n        if(this.props.shallRender){\n        return(\n        <div className=\"innersecSection\">\n\n           \n            \n            <span style={{color:\"white\",fontSize:\"14px\",alignSelf:\"left\"}}>{this.state.measurementType.name} CH {this.state.measurementChannel}   {this.state.statusUI}</span>\n            <div className=\"lowerSecDiv\">\n            <KeyPadInput keyPadRef={r => (this.keypad = r)} overrideval={this.state.measurementLimit} className=\"outLimInput\" onEnter={this.applyLimChange} onChange={this.onLimchange}/>\n            <button className = \"secButton\" onClick = {this.openSetup} style={{backgroundColor:color_blue}}>Setup</button>\n\n            </div>\n            <div className=\"sguage\">\n            <div className = \"sflowBox\" >\n                <div className=\"sinnerFlowBox\" >\n                    <div className=\"sdivider\"></div>\n                    <div className=\"sdivider\" style={{top:\"-35%\"}}>{this.state.currentReading}/{this.state.measurementLimit}</div>\n                </div>\n                <div className=\"sinnerFlowBoxL\" style={{backgroundColor:this.state.guageColor}}>\n                    <div className=\"sdivider\"></div>\n                    <div className=\"sdivider\" style={{top:\"-35%\"}}>{this.state.measurementUnit}</div>\n                </div>\n            </div>\n            </div>   \n         \n            {this.state.seen ? <SecondaryPop volumetric={true} flipped={this.props.flipped} toggle={this.openSetup} onParamUpdate={this.onParamsChanged}/> : null}\n\n        </div>)\n        }else return null;\n    }\n\n\n}","import React from 'react'\nimport './components.css'\nimport './secondaryPanel.css'\nimport SecondaryPanel from './secondaryPanel';\nimport VolumetricPanel from './volumetricPanel';\nconst TAB_STATE_FLOW = 0;\nconst TAB_STATE_VOL = 1;\nconst COLOR_TAB_SEL = 'dodgerblue';\nconst COLOR_TAB_NONSEL = '#8cc6ff'\nexport default class SecondaryMenu extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        this.state = {\n            tabState : TAB_STATE_FLOW,\n            flowColor: COLOR_TAB_SEL,\n            volColor: COLOR_TAB_NONSEL\n        };\n\n    }\n    selectFlow = () =>\n    {\n        if(this.state.tabState === TAB_STATE_FLOW) return;\n\n        this.setState({\n            tabState: TAB_STATE_FLOW,\n            flowColor:COLOR_TAB_SEL,\n            volColor: COLOR_TAB_NONSEL\n        });\n    }\n\n    selectVolume = () =>{\n        if(this.state.tabState === TAB_STATE_VOL) return;\n\n        this.setState({\n            tabState: TAB_STATE_VOL,\n            flowColor:COLOR_TAB_NONSEL,\n            volColor:COLOR_TAB_SEL\n        });\n    }\n    render()\n    {\n        return(\n            <div className='secSection'>\n            <div style={{color:\"white\",fontSize:\"18px\",textAlign:'center',width:'100%'}}>Secondary Control</div>\n            <div className='secTabContainer'>\n                <div className='secTab' style={{backgroundColor:this.state.flowColor}} onClick={this.selectFlow}>Flow</div>\n                <div className='secTab' style={{backgroundColor:this.state.volColor}} onClick={this.selectVolume}>Volume</div>\n            </div>\n            {/* FLOW PANEL */}\n      \n            <SecondaryPanel OnStateChange = {this.props.updatePidState} flipped={this.props.flipped} shallRender={!this.state.tabState}/>\n           \n            {/* VOLUME PANEL */}\n     \n            <VolumetricPanel OnStateChange = {this.props.updatePidState} flipped={this.props.flipped} shallRender={this.state.tabState}/>\n           \n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Header from './header.js'\nimport GraphContainer from './graph.js'\nimport FlowGuage from './flowGuage';\nimport VolumeGuage from './volGuage';\nimport TareButton from './tareButton';\nimport LogButton from './logButton';\nimport StopButton from './stopButton';\nimport OffsetButton from './offsetButton';\nimport LogNotifier from './logNotifier';\nimport PidButton from './pidButton';\nimport InfluxGraph from './InfluxGraph';\nimport PidSelector from './pidSelector';\nimport OffsetButtonVol from './offsetButtonvol';\nimport SecondaryPanel from './secondaryPanel';\nimport EnvManager from './envManager';\nimport PurgeButton from './purgeButton';\nimport PrimeButton from './primeButton';\nimport VolumetricPanel from './volumetricPanel';\nimport SecondaryMenu from './secondaryMenu';\nimport DataManager from './DataManager';\nvar FLIP_CHANGED = 0;\nvar PREV_FLIP = 0;\nvar GOT_KP = true;\nexport default class App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.updateLogState = this.updateLogState.bind(this);\n    this.updatePidState = this.updatePidState.bind(this);\n    this.rotateScreen = this.rotateScreen.bind(this);\n    \n    this.state = {\n      logState : false,\n      pidState: 0,\n      screenRotation:\"appContainer\",\n      flipped:false,\n      viewReady:false\n    }\n  }\n\n  \n  updateLogState(state){\n    //console.log('Setting Log State')\n    this.setState({logState:state})\n  }\n\n  updatePidState(state){\n    this.setState({pidState:state})\n    //console.log(this.state.pidState)\n  }\n  rotateScreen(){\n\n    if(this.state.screenRotation.valueOf() === \"appContainer\".valueOf()){\n      //console.log(\"Flip down\")\n\n      this.setState({screenRotation:\"appContainerFlip\",flipped:true})\n      FLIP_CHANGED = 1;\n    }\n    else{\n      //console.log(\"flip up\")\n  \n      FLIP_CHANGED = 0;\n      this.setState({screenRotation:\"appContainer\",flipped:false})\n    }\n  }\n  assertRotate = () =>{\n    const envMan = EnvManager.getInstance();\n    if(envMan.shouldRotate()){\n      this.rotateScreen();\n    }\n    this.setState({viewReady:true});\n  }\n  loadEnvs = () =>{\n    const envMan = EnvManager.getInstance();\n    envMan.loadVariables();\n    if(!envMan.envsLoaded()){\n      setTimeout(this.loadEnvs,10);\n    }\n    else{\n      this.assertRotate();\n    }\n  }\n\n  socketListener(data)\n  {\n  //  console.log(data);\n  }\n  componentDidMount(){\n    window.addEventListener(\"contextmenu\", function(e) { e.preventDefault(); })\n    DataManager.getInstance();\n\n    \n    this.loadEnvs();\n\n  }\n  render() {\n    return (\n      <div className={this.state.screenRotation}>\n        {\n          // !this.state.viewReady && <div style={{backgroundColor:'white',position:'absolute',height:'100%',width:'100%',zIndex:5000}}/>\n        }\n        <Header rotatePressed = {this.rotateScreen} />\n        <div className=\"leftPanel\">\n        <InfluxGraph controlState = {this.state.pidState}/>\n        </div>\n        <div className=\"rightPanel\">\n        <LogNotifier logState = {this.state.logState}/>\n        <PidSelector OnStateChange = {this.updatePidState}/>\n        <SecondaryMenu OnStateChange = {this.updatePidState} flipped={this.state.flipped}/>\n    \n        <FlowGuage />\n        <VolumeGuage />\n        \n        <div className=\"rButtonDiv\">\n      \n        <OffsetButton/>\n       \n\n       \n        <TareButton />\n        <LogButton logState = {this.updateLogState}/>\n        <PrimeButton/>\n        {/* <PurgeButton/> */}\n        <StopButton />\n        {/* <PidButton /> */}\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport { Router, Route, Switch, Redirect } from 'react-router';\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n  <Router history = {history}>\n    <Switch>\n      <Route path = \"/Control\"><App /></Route>\n    </Switch>\n    <Redirect exact from=\"/\" to=\"Control\"/>\n  </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}